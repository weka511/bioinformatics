#!wing
#!version=10.0
##################################################################
# Wing project file                                              #
##################################################################
[project attributes]
proj.file-list = [loc('2sat.py'),
                  loc('2sum.py'),
                  loc('3sum.py'),
                  loc('align.py'),
                  loc('alph.py'),
                  loc('ASMQ.py'),
                  loc('assemble.py'),
                  loc('BA4M.py'),
                  loc('BA5H.py'),
                  loc('BA5I.py'),
                  loc('BA5J.py'),
                  loc('BA5K.py'),
                  loc('BA5L.py'),
                  loc('BA5M.py'),
                  loc('BA6A.py'),
                  loc('BA6B.py'),
                  loc('BA6C.py'),
                  loc('BA6D.py'),
                  loc('BA6F.py'),
                  loc('BA6G.py'),
                  loc('BA6H.py'),
                  loc('BA6I.py'),
                  loc('BA6J.py'),
                  loc('BA6K.py'),
                  loc('BA7A.py'),
                  loc('BA7B.py'),
                  loc('BA7C.py'),
                  loc('BA7D.py'),
                  loc('BA7E.py'),
                  loc('BA7F.py'),
                  loc('BA7G.py'),
                  loc('BA8A.py'),
                  loc('BA8B.py'),
                  loc('BA8C.py'),
                  loc('BA8D.py'),
                  loc('BA8E.py'),
                  loc('BA9A.py'),
                  loc('BA9B.py'),
                  loc('BA9C.py'),
                  loc('BA9D.py'),
                  loc('BA9E.py'),
                  loc('BA9F.py'),
                  loc('BA9G.py'),
                  loc('BA9H.py'),
                  loc('BA9I.py'),
                  loc('BA9J.py'),
                  loc('BA9K.py'),
                  loc('BA9L.py'),
                  loc('BA9M.py'),
                  loc('BA9N.py'),
                  loc('BA9O.py'),
                  loc('BA9P.py'),
                  loc('BA9Q.py'),
                  loc('BA9R.py'),
                  loc('BA10A.py'),
                  loc('BA10B.py'),
                  loc('BA10C.py'),
                  loc('BA10D.py'),
                  loc('BA10E.py'),
                  loc('BA10F.py'),
                  loc('BA10G.py'),
                  loc('BA10H.py'),
                  loc('BA10I.py'),
                  loc('BA10J.py'),
                  loc('BA10K.py'),
                  loc('BA11A.py'),
                  loc('BA11B.py'),
                  loc('BA11C.py'),
                  loc('BA11D.py'),
                  loc('BA11E.py'),
                  loc('BA11F.py'),
                  loc('BA11G.py'),
                  loc('BA11H.py'),
                  loc('BA11I.py'),
                  loc('BA11J.py'),
                  loc('bf.py'),
                  loc('bfs.py'),
                  loc('BINS.py'),
                  loc('bip.py'),
                  loc('cat.py'),
                  loc('cc.py'),
                  loc('chbp.py'),
                  loc('cntq.py'),
                  loc('combinatorics.py'),
                  loc('conv.py'),
                  loc('CORR.py'),
                  loc('count_kmers.py'),
                  loc('cset.py'),
                  loc('cstr.py'),
                  loc('ctbl.py'),
                  loc('cte.py'),
                  loc('ctea.py'),
                  loc('dag.py'),
                  loc('DBRU.py'),
                  loc('DDEG.py'),
                  loc('DEG.py'),
                  loc('dij.py'),
                  loc('dna.py'),
                  loc('edit.py'),
                  loc('edta.py'),
                  loc('eubt.py'),
                  loc('fasta.py'),
                  loc('fibo.py'),
                  loc('findtests.py'),
                  loc('fragile.py'),
                  loc('FRMT.py'),
                  loc('full.py'),
                  loc('gaff.py'),
                  loc('GASM.py'),
                  loc('GBK.py'),
                  loc('gcon.py'),
                  loc('GLOB.py'),
                  loc('graphs.py'),
                  loc('GREP.py'),
                  loc('gs.py'),
                  loc('hdag.py'),
                  loc('hea.py'),
                  loc('helpers.py'),
                  loc('hmm.py'),
                  loc('INS.py'),
                  loc('INV.py'),
                  loc('itwv.py'),
                  loc('KMP.py'),
                  loc('ksim.py'),
                  loc('laff.py'),
                  loc('lcsq.py'),
                  loc('ling.py'),
                  loc('loca.py'),
                  loc('LONG.py'),
                  loc('lrep.py'),
                  loc('maj.py'),
                  loc('MED.py'),
                  loc('mend.py'),
                  loc('MER.py'),
                  loc('mgap.py'),
                  loc('mmch.py'),
                  loc('motz.py'),
                  loc('MPRT.py'),
                  loc('mrep.py'),
                  loc('MS.py'),
                  loc('mult.py'),
                  loc('newick.py'),
                  loc('nwc.py'),
                  loc('nwck.py'),
                  loc('oap.py'),
                  loc('orfr.py'),
                  loc('osym.py'),
                  loc('PAR3.py'),
                  loc('PAR.py'),
                  loc('PCOV.py'),
                  loc('pdpl.py'),
                  loc('phylogeny.py'),
                  loc('pmch.py'),
                  loc('prsm.py'),
                  loc('ps.py'),
                  loc('PTRA.py'),
                  loc('qrt.py'),
                  loc('qrtd.py'),
                  loc('QS.py'),
                  loc('README.md'),
                  loc('rear.py'),
                  loc('reference_tables.py'),
                  loc('replication.py'),
                  loc('revp.py'),
                  loc('rna.py'),
                  loc('rnas.py'),
                  loc('rosalind.py'),
                  loc('rsub.py'),
                  loc('sc.py'),
                  loc('scc.py'),
                  loc('scsp.py'),
                  loc('sdag.py'),
                  loc('sequence.py'),
                  loc('sgra.py'),
                  loc('sims.py'),
                  loc('smgb.py'),
                  loc('snp.py'),
                  loc('sort.py'),
                  loc('spec.py'),
                  loc('spectrum.py'),
                  loc('sptd.py'),
                  loc('sq.py'),
                  loc('suff.py'),
                  loc('template.py'),
                  loc('tree.py'),
                  loc('trie.py'),
                  loc('ts.py'),
                  loc('tyrocidine.py'),
                  loc('ukkonen.py')]
proj.file-type = 'normal'
proj.launch-config = {loc('2sat.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('BA10D.py'): ('project',
        ('--extra',
         '')),
                      loc('BA10E.py'): ('project',
        ('--rosalind',
         '')),
                      loc('BA10F.py'): ('project',
        ('--rosalind',
         '')),
                      loc('BA10H.py'): ('project',
        ('--rosalind',
         '')),
                      loc('BA10I.py'): ('project',
        ('--rosalind',
         '')),
                      loc('BA10J.py'): ('project',
        ('--rosalind',
         '')),
                      loc('BA10K.py'): ('project',
        ('--rosalind',
         '')),
                      loc('BA11E.py'): ('project',
        ('--extra',
         '')),
                      loc('BA11F.py'): ('project',
        ('--rosalind',
         '')),
                      loc('BA11H.py'): ('project',
        ('--help',
         '')),
                      loc('BA11I.py'): ('project',
        ('--sample',
         '')),
                      loc('BA5K.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA5L.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA6A.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('BA6B.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA6C.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA6D.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA7F.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('BA9A.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA9B.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('BA9C.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA9D.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('BA9E.py'): ('project',
                                       ('--extra',
        '')),
                      loc('BA9F.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA9G.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA9H.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA9J.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA9K.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA9L.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA9M.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA9N.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA9O.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA9P.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('BA9Q.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BA9R.py'): ('project',
                                       ('--sample',
        '')),
                      loc('BINS.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('MPRT.py'): ('project',
                                       ('rosalind_mprt.txt --path C:\\Users\\Simon\\Downloads --output foo.txt',
        '')),
                      loc('alph.py'): ('project',
                                       ('--sample',
        '')),
                      loc('bf.py'): ('project',
                                     ('--sample',
                                      '')),
                      loc('bfs.py'): ('project',
                                      ('--sample',
                                       '')),
                      loc('bryant.py'): ('project',
        ('--sample',
         '')),
                      loc('cat.py'): ('project',
                                      ('--sample',
                                       '')),
                      loc('chbp.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('cntq.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('combinatorics.py'): ('project',
        ('--sample',
         '')),
                      loc('cset.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('cstr.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('ctbl.py'): ('project',
                                       ('--sample',
        '')),
                      loc('ctea.py'): ('project',
                                       ('--sample',
        '')),
                      loc('dij.py'): ('project',
                                      ('--sample',
                                       '')),
                      loc('dna.py'): ('project',
                                      ('--rosalind',
                                       '')),
                      loc('edta.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('eubt.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('fibo.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('findtests.py'): ('project',
        ('--exclude align.py',
         '')),
                      loc('gcon.py'): ('project',
                                       ('--test',
        '')),
                      loc('itwv.py'): ('project',
                                       ('--sample',
        '')),
                      loc('ksim.py'): ('project',
                                       ('--sample',
        '')),
                      loc('laff-pypl.py'): ('project',
        ('--rosalind',
         '')),
                      loc('laff.py'): ('project',
                                       ('--sample',
        '')),
                      loc('lalign.py'): ('project',
        ('--email simon@greenweaves.nz --stype dna --expthr 0.1 --asequence GACTCCTTTGTTTGCCTTAAATAGATACATATTTACTCTTGACTCTTTTGTTGGCCTTAAATAGATACATATTTGTGCGACTCCACGAGTGATTCGTA --bsequence ATGGACTCCTTTGTTTGCCTTAAATAGATACATATTCAACAAGTGTGCACTTAGCCTTGCCGACTCCTTTGTTTGCCTTAAATAGATACATATTTG',
         '')),
                      loc('ling.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('lrep.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('mend.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('mgap.py'): ('project',
                                       ('--sample',
        '')),
                      loc('mmch.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('motz.py'): ('project',
                                       ('--sample',
        '')),
                      loc('mrep.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('mult.py'): ('project',
                                       ('--sample',
        '')),
                      loc('nwc.py'): ('project',
                                      ('--rosalind',
                                       '')),
                      loc('oap.py'): ('project',
                                      ('--sample',
                                       '')),
                      loc('osym.py'): ('project',
                                       ('--sample',
        '')),
                      loc('pdpl.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('pmch.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('qrt.py'): ('project',
                                      ('--rosalind',
                                       '')),
                      loc('qrtd.py'): ('project',
                                       ('--sample',
        '')),
                      loc('qrtd1.py'): ('project',
        ('--rosalind',
         '')),
                      loc('revp.py'): ('project',
                                       ('--sample',
        '')),
                      loc('rna.py'): ('project',
                                      ('--sample',
                                       '')),
                      loc('rnas.py'): ('project',
                                       ('--sample',
        '')),
                      loc('rsub.py'): ('project',
                                       ('--sample',
        '')),
                      loc('scc.py'): ('project',
                                      ('--sample',
                                       '')),
                      loc('sdag.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('sims.py'): ('project',
                                       ('--sample',
        '')),
                      loc('smgb.py'): ('project',
                                       ('--sample',
        '')),
                      loc('sptd.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('subo.py'): ('project',
                                       ('--sample',
        '')),
                      loc('suff.py'): ('project',
                                       ('--sample',
        '')),
                      loc('template.py'): ('project',
        ('--sample',
         '')),
                      loc('tree.py'): ('project',
                                       ('--rosalind',
        '')),
                      loc('trie.py'): ('project',
                                       ('--sample',
        ''))}
[user attributes]
debug.err-values = {loc('BA5H.py'): {},
                    loc('cte.py'): {}}
debug.recent-run-args = {loc('2sat.py'): ['--rosalind',
        '--sample',
        '-rosalind'],
                         loc('BA10D.py'): ['--extra',
        '--sample',
        '--rosalind'],
                         loc('BA10E.py'): ['--rosalind',
        '--sample',
        '--extra',
        '--help',
        '--rosalind --precision 12',
        '--rosalind --precision 3',
        '--rosalind precision=3',
        '--text',
        '--rosalind  --precision 3 --trace',
        '--sample  --precision 3 --trace',
        '--rosalind  --precision 3',
        '--text --trace',
        '--text --precision 5',
        '--text precision 5'],
                         loc('BA10F.py'): ['--rosalind',
        '--sample'],
                         loc('BA10H.py'): ['--rosalind',
        '--extra',
        '--sample'],
                         loc('BA10I.py'): ['--rosalind'],
                         loc('BA10J.py'): ['--rosalind',
        '--sample'],
                         loc('BA10K.py'): ['--rosalind'],
                         loc('BA11E.py'): ['--extra',
        '--rosalind',
        '--sample'],
                         loc('BA11F.py'): ['--rosalind',
        '--extra',
        '--sample'],
                         loc('BA11H.py'): ['--help',
        '--rosalind',
        '--sample'],
                         loc('BA11I.py'): ['--sample'],
                         loc('BA5K.py'): ['--sample',
        '--align',
        '--extra'],
                         loc('BA5L.py'): ['--sample',
        '--extra'],
                         loc('BA6A.py'): ['--rosalind',
        '--sample'],
                         loc('BA6B.py'): ['--sample',
        '--rosalind'],
                         loc('BA6C.py'): ['--sample',
        '--rosalind'],
                         loc('BA6D.py'): ['--sample'],
                         loc('BA7F.py'): ['--rosalind',
        '--sample'],
                         loc('BA9A.py'): ['--sample',
        '--rosalind',
        '--extra'],
                         loc('BA9B.py'): ['--rosalind',
        '--extra',
        '--sample'],
                         loc('BA9C.py'): ['--sample',
        '--rosalind',
        '--extra'],
                         loc('BA9D.py'): ['--rosalind',
        '--extra',
        '--sample'],
                         loc('BA9E.py'): ['--extra',
        '--sample',
        '--rosalind'],
                         loc('BA9F.py'): ['--sample',
        '--extra'],
                         loc('BA9G.py'): ['--sample',
        '--rosalind',
        '--extra'],
                         loc('BA9H.py'): ['--sample',
        '--rosalind'],
                         loc('BA9J.py'): ['--sample',
        '--extra',
        '--rosalind'],
                         loc('BA9K.py'): ['--sample',
        '--extra',
        '--rosalind'],
                         loc('BA9L.py'): ['--sample',
        '--extra',
        '--rosalind'],
                         loc('BA9M.py'): ['--sample',
        '--extra',
        '--rosalind'],
                         loc('BA9N.py'): ['--sample',
        '--extra',
        '--panama',
        '--banana'],
                         loc('BA9O.py'): ['--sample'],
                         loc('BA9P.py'): ['--rosalind',
        '--sample',
        '--extra'],
                         loc('BA9Q.py'): ['--sample',
        '--rosalind',
        '--extra'],
                         loc('BA9R.py'): ['--sample',
        '--banana --trace',
        '--banana',
        '--banana  --trace',
        '--banana  --debug',
        '--sample --debug',
        '--extra',
        '--debug --extra',
        '--debug',
        '--extra --debug',
        '--rosalind'],
                         loc('BINS.py'): ['--rosalind',
        '--sample'],
                         loc('MPRT.py'): ['rosalind_mprt.txt --path C:\\Users\\Simon\\Downloads --output foo.txt',
        'rosalind_mprt_2.txt --output foo.txt',
        'rosalind_mprt_2.txt'],
                         loc('align.py'): ['-v',
        'Test_5_Alignment.test_ba5m_sample',
        'Test_5_Alignment',
        '__name__.Test_5_Alignment',
        '__main__.Test_5_Alignment',
        'Test_5_Alginment',
        'Test_5_Alignment.test_ba5h_sample',
        'Test_5_Alignment.test_ba51_sample',
        'Test_5_Alignment.test_edta_rosalind',
        'Test_5_Alignment.test_edta_sample',
        'Test_5_Alignment.test_edit_rosalind',
        'Test_5_Alignment.test_edit_sample',
        'Test_5_Alignment.test_ba5f_rosalind',
        'Test_5_Alignment.test_ba5e_sample Test_5_Alignment.test_ba5f_sample',
        'Test_5_Alignment.test_ba5e_sample ',
        'Test_5_Alignment.test_ba5e_sample Test_5_Alignment.test_ba5e_rosalind',
        'Test_5_Alignment.test_ba5e',
        'Test_5_Alignment.test_ba5f_sample ',
        'Test_5_Alignment.test_ba5e Test_5_Alignment.test_ba5f_sample ',
        'Test_5_Alignment.test_ba5e ',
        'Test_5_Alignment.test_ba5f_sample Test_5_Alignment.test_ba5e ',
        'Test_5_Alignment.test_ba5f_sample Test_5_Alignment.test_ba5f_rosalind',
        'Test_5_Alignment.test_ba5f_sample',
        '--include Test_5_Alignment.test_ba5e',
        '--tests Test_5_Alignment.test_ba5e',
        'test_ba5e',
        'foo',
        '--sample'],
                         loc('alph.py'): ['--sample',
        '--rosalind'],
                         loc('bf.py'): ['--sample',
        '--rosalind'],
                         loc('bfs.py'): ['--sample',
        '--rosalind'],
                         loc('bryant.py'): ['--sample'],
                         loc('cat.py'): ['--sample',
        '--rosalind'],
                         loc('chbp.py'): ['--rosalind',
        '--abcde',
        '--sample'],
                         loc('cntq.py'): ['--rosalind',
        '--sample'],
                         loc('combinatorics.py'): ['--sample'],
                         loc('cset.py'): ['--rosalind',
        '--sample',
        '--align'],
                         loc('cstr.py'): ['--rosalind',
        '--sample'],
                         loc('ctbl.py'): ['--sample',
        '--rosalind'],
                         loc('ctea.py'): ['--sample',
        '--rosalind'],
                         loc('dij.py'): ['--sample',
        '--rosalind'],
                         loc('dna.py'): ['--rosalind',
        '--sample'],
                         loc('edta.py'): ['--rosalind',
        '--sample'],
                         loc('eubt.py'): ['--rosalind',
        '--sample'],
                         loc('fibo.py'): ['--rosalind',
        '--sample'],
                         loc('findtests.py'): ['--exclude align.py',
        '--help'],
                         loc('gcon.py'): ['--test',
        '--sample',
        '--test 5',
        'WWW DNP',
        '--test 4',
        '--test 3',
        '--test 2',
        '--test 1',
        'foo bar baz'],
                         loc('itwv.py'): ['--sample'],
                         loc('ksim.py'): ['--sample',
        '--rosalind'],
                         loc('laff-pypl.py'): ['--rosalind',
        '--sample'],
                         loc('laff.py'): ['--sample',
        '--rosalind'],
                         loc('lalign.py'): ['--email simon@greenweaves.nz --stype dna --expthr 0.1 --asequence GACTCCTTTGTTTGCCTTAAATAGATACATATTTACTCTTGACTCTTTTGTTGGCCTTAAATAGATACATATTTGTGCGACTCCACGAGTGATTCGTA --bsequence ATGGACTCCTTTGTTTGCCTTAAATAGATACATATTCAACAAGTGTGCACTTAGCCTTGCCGACTCCTTTGTTTGCCTTAAATAGATACATATTTG',
        '--email simon@greenweaves.nz --stype dna --expthr 0.1 -asequence GACTCCTTTGTTTGCCTTAAATAGATACATATTTACTCTTGACTCTTTTGTTGGCCTTAAATAGATACATATTTGTGCGACTCCACGAGTGATTCGTA --bsequence ATGGACTCCTTTGTTTGCCTTAAATAGATACATATTCAACAAGTGTGCACTTAGCCTTGCCGACTCCTTTGTTTGCCTTAAATAGATACATATTTG',
        '--email simon@greenweaves.nz --stype dna ---expthr 0.1 -asequence GACTCCTTTGTTTGCCTTAAATAGATACATATTTACTCTTGACTCTTTTGTTGGCCTTAAATAGATACATATTTGTGCGACTCCACGAGTGATTCGTA --bsequence ATGGACTCCTTTGTTTGCCTTAAATAGATACATATTCAACAAGTGTGCACTTAGCCTTGCCGACTCCTTTGTTTGCCTTAAATAGATACATATTTG',
        '--email simon@greenweaves.nz --stype dna --asequence GACTCCTTTGTTTGCCTTAAATAGATACATATTTACTCTTGACTCTTTTGTTGGCCTTAAATAGATACATATTTGTGCGACTCCACGAGTGATTCGTA --bsequence ATGGACTCCTTTGTTTGCCTTAAATAGATACATATTCAACAAGTGTGCACTTAGCCTTGCCGACTCCTTTGTTTGCCTTAAATAGATACATATTTG',
        '--email simon@greenweaves.nz --stype DNA --asequence GACTCCTTTGTTTGCCTTAAATAGATACATATTTACTCTTGACTCTTTTGTTGGCCTTAAATAGATACATATTTGTGCGACTCCACGAGTGATTCGTA --bsequence ATGGACTCCTTTGTTTGCCTTAAATAGATACATATTCAACAAGTGTGCACTTAGCCTTGCCGACTCCTTTGTTTGCCTTAAATAGATACATATTTG'],
                         loc('ling.py'): ['--rosalind',
        '--sample',
        '--ukkonen',
        '--actual',
        '--align'],
                         loc('lrep.py'): ['--rosalind',
        '--sample'],
                         loc('mend.py'): ['--rosalind',
        '--sample'],
                         loc('mgap.py'): ['--sample'],
                         loc('mmch.py'): ['--rosalind',
        '--sample3',
        '--sample2',
        '--sample',
        '-sample'],
                         loc('motz.py'): ['--sample',
        '--rosalind'],
                         loc('mrep.py'): ['--rosalind',
        '--sample',
        '--extra'],
                         loc('mult.py'): ['--sample'],
                         loc('nwc.py'): ['--rosalind',
        '--sample'],
                         loc('oap.py'): ['--sample',
        '--rosalind'],
                         loc('osym.py'): ['--sample',
        '--rosalind',
        '--samples'],
                         loc('pdpl.py'): ['--rosalind',
        '--sample'],
                         loc('phylogeny.py'): ['--sample'],
                         loc('pmch.py'): ['--rosalind',
        '--sample'],
                         loc('qrt.py'): ['--rosalind',
        '--sample'],
                         loc('qrtd.py'): ['--sample',
        '--rosalind',
        '--paper --show',
        '--exercise',
        '--help',
        '--tests',
        '--align',
        '--paper'],
                         loc('qrtd1.py'): ['--rosalind'],
                         loc('revp.py'): ['--sample'],
                         loc('rna.py'): ['--sample'],
                         loc('rnas.py'): ['--sample',
        '--rosalind'],
                         loc('rosalind.py'): ['TestCaseRosalind.test_iprb',
        'TestRosalind.test_iprb',
        'Test_1_Rosalind.test_iprb',
        'Test_1_Replication.test_iprb',
        'Test_3_Assembly.test_ba3j',
        'Test_3_Assembly.test_ba3i',
        'Test_3_Assemply.test_ba3i',
        'TestRosalind.test_ba3i',
        'TestRosalind.test_gc',
        'TestRosalind.test_rstr',
        'TestRosalind.test_eval'],
                         loc('rsub.py'): ['--sample'],
                         loc('scc.py'): ['--sample',
        '--rosalind'],
                         loc('sdag.py'): ['--rosalind',
        '--sample'],
                         loc('sims.py'): ['--sample',
        '--rosalind'],
                         loc('smgb.py'): ['--sample',
        '--rosalind'],
                         loc('spectrum.py'): ['spectrum.TestSpectum.test_ba4j',
        'TestSpectum.test_ba4j',
        'test_ba4j'],
                         loc('sptd.py'): ['--rosalind',
        '--sample',
        '--align'],
                         loc('subo.py'): ['--sample',
        '--rosalind'],
                         loc('suff.py'): ['--sample',
        '--rosalind'],
                         loc('template.py'): ['--sample'],
                         loc('tree.py'): ['--rosalind',
        '--sample'],
                         loc('trie.py'): ['--sample',
        '--rosalind']}
debug.show-args-dialog = {loc('../cluster/fcs_params.py'): False,
                          loc('ASMQ.py'): False,
                          loc('BA4M.py'): False,
                          loc('BA7A.py'): False,
                          loc('BA7B.py'): False,
                          loc('BA7C.py'): False,
                          loc('BA7D.py'): False,
                          loc('BA7E.py'): False,
                          loc('BA7G.py'): False,
                          loc('BA8B.py'): False,
                          loc('BA8E.py'): False,
                          loc('CORR.py'): False,
                          loc('DBRU.py'): False,
                          loc('GASM.py'): False,
                          loc('GREP.py'): False,
                          loc('KMP.py'): False,
                          loc('PCOV.py'): False,
                          loc('count-kmer-occurrences.py'): False,
                          loc('newick.py'): False,
                          loc('nwck.py'): False,
                          loc('unknown:<untitled> #48'): False}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'dtaAtJloNhSft7SabFzspl0xqEmVIDbK',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.2522123893805309,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [(172,)],
                                 'top-node': (148,)}},
        'tree-style': 'deep'}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('../../../Program Files/Wing Personal 10/resources/builtin-pi-files/__os__/win32/3.12/builtins.pi'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../Program Files/Wing Personal 10/resources/builtin-pi-files/__os__/win32/3.12/builtins.pi'),
                      'abs')]},
        loc('../../../Program Files/Wing Personal 10/resources/typeshed/stdlib/3/unittest/case.pyi'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../Program Files/Wing Personal 10/resources/typeshed/stdlib/3/unittest/case.pyi'),
                      'addModuleCleanup')]},
        loc('../../../Program Files/Wing Personal 9/resources/builtin-pi-files/__os__/win32/3.11/builtins.pi'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../Program Files/Wing Personal 9/resources/builtin-pi-files/__os__/win32/3.11/builtins.pi'),
                      'abs')]},
        loc('../../../Program Files/Wing Personal 9/resources/builtin-pi-files/__os__/win32/3.11/math.pi'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../Program Files/Wing Personal 9/resources/builtin-pi-files/__os__/win32/3.11/math.pi'),
                      'acos')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/collections/__init__.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/collections/abc.py'),
                      '')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/encodings/cp1252.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/encodings/cp1252.py'),
                      'Codec')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/ntpath.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/ntpath.py'),
                      'abspath')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Align/substitution_matrices/__init__.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Align/substitution_matrices/__init__.py'),
                      'Array')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/BaseTree.py'): {'expanded-nodes': [[('class def',
        loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/BaseTree.py'),
        'Clade')],
        [('class def',
          loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/BaseTree.py'),
          'Tree')]],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/BaseTree.py'),
                      'BranchColor')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/NewickIO.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/NewickIO.py'),
                      'NewickError')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/_io.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/_io.py'),
                      'convert')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/_utils.py'): {'expanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/_utils.py'),
                             'draw')]],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/_utils.py'),
                      'draw')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/deprecated/classic.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/deprecated/classic.py'),
                             '_routine_stacklevel')]],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/deprecated/classic.py'),
                      'ClassicAdapter')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/__init__.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/__init__.pyi'),
                      'absolute')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/core/multiarray.pyi'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/core/multiarray.pyi'),
                      'add_docstring')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/lib/index_tricks.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/lib/index_tricks.py'),
                      'array_function_dispatch')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/testing/_private/utils.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/testing/_private/utils.py'),
                      'assert_')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/scipy/special/_basic.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/scipy/special/_basic.py'),
                      'ai_zeros')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/string.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/string.py'),
                      'ascii_letters')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/timeit.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/timeit.py'),
                      'default_number')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/unittest/case.py'): {'expanded-nodes': [[('class def',
        loc('../AppData/Local/Programs/Python/Python311/Lib/unittest/case.py'),
        'TestCase')]],
        'selected-nodes': [[('generic attribute',
                             loc('../AppData/Local/Programs/Python/Python311/Lib/unittest/case.py'),
                             '__unittest')]],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/unittest/case.py'),
                      'addModuleCleanup')]},
        loc('../AppData/Local/Programs/Python/Python311/Lib/unittest/main.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../AppData/Local/Programs/Python/Python311/Lib/unittest/main.py'),
                             '__unittest')]],
        'top-node': [('generic attribute',
                      loc('../AppData/Local/Programs/Python/Python311/Lib/unittest/main.py'),
                      'main')]},
        loc('../AppData/Local/Programs/Python/Python312/Lib/site-packages/numpy/__init__.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../AppData/Local/Programs/Python/Python312/Lib/site-packages/numpy/testing/_private/utils.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../AppData/Local/Programs/Python/Python312/Lib/site-packages/numpy/testing/_private/utils.py'),
                      'KnownFailureException')]},
        loc('../AppData/Local/Programs/Python/Python312/Lib/unittest/case.py'): {'expanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../AppData/Local/Programs/Python/Python312/Lib/unittest/case.py'),
                             'addModuleCleanup')]],
        'top-node': [('function def',
                      loc('../AppData/Local/Programs/Python/Python312/Lib/unittest/case.py'),
                      'addModuleCleanup')]},
        loc('../dynamics/template.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../dynamics/template.py'),
                      'args')]},
        loc('2sat.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('2sat.py'),
                                       'args')]},
        loc('2sum.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('2sum.py'),
                                       'A')]},
        loc('ASMQ.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('function def',
                                       loc('ASMQ.py'),
                                       'asmq')]},
        loc('BA10A.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': None},
        loc('BA10B.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': None},
        loc('BA10C.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA10C.py'),
        'Emission')]},
        loc('BA10D.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA10D.py'),
        'alphabet')]},
        loc('BA10E.py'): {'expanded-nodes': [],
                          'selected-nodes': [[('generic attribute',
        loc('BA10E.py'),
        'Transition')]],
                          'top-node': [('generic attribute',
        loc('BA10E.py'),
        'Alphabet')]},
        loc('BA10F.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA10F.py'),
        'args')]},
        loc('BA10G.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA10G.py'),
        'args')]},
        loc('BA10H.py'): {'expanded-nodes': [],
                          'selected-nodes': [[('generic attribute',
        loc('BA10H.py'),
        'Transitions')]],
                          'top-node': [('generic attribute',
        loc('BA10H.py'),
        'args')]},
        loc('BA10I.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA10I.py'),
        'alphabet')]},
        loc('BA10J.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA10J.py'),
        'alphabet')]},
        loc('BA10K.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA10K.py'),
        'alphabet')]},
        loc('BA11A.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA11A.py'),
        'graph')]},
        loc('BA11B.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA11B.py'),
        'ss')]},
        loc('BA11C.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': None},
        loc('BA11D.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': None},
        loc('BA11E.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA11E.py'),
        'args')]},
        loc('BA11F.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA11F.py'),
        'args')]},
        loc('BA11H.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA11H.py'),
        'args')]},
        loc('BA11I.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('BA11I.py'),
        'args')]},
        loc('BA4M.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA4M.py'),
                                       'e')]},
        loc('BA5H.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA5H.py'),
                                       'd')]},
        loc('BA5I.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA5I.py'),
                                       'd')]},
        loc('BA5K.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA5K.py'),
                                       'args')]},
        loc('BA5L.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('function def',
                                       loc('BA5L.py'),
                                       'alignUsingLinearSpace')]},
        loc('BA5M.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA5M.py'),
                                       's')]},
        loc('BA6B.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA6B.py'),
                                       'args')]},
        loc('BA6D.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA6D.py'),
                                       'args')]},
        loc('BA7A.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA7A.py'),
                                       'ds')]},
        loc('BA7B.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA7B.py'),
                                       'D')]},
        loc('BA7C.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA7C.py'),
                                       'D')]},
        loc('BA7D.py'): {'expanded-nodes': [],
                         'selected-nodes': [[('generic attribute',
        loc('BA7D.py'),
        'params')]],
                         'top-node': [('generic attribute',
                                       loc('BA7D.py'),
                                       'D')]},
        loc('BA7E.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA7E.py'),
                                       'D')]},
        loc('BA7F.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA7F.py'),
                                       'args')]},
        loc('BA7G.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA7G.py'),
                                       'a')]},
        loc('BA8A.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA8A.py'),
                                       'f')]},
        loc('BA8D.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA8D.py'),
                                       'beta')]},
        loc('BA8E.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA8E.py'),
                                       'D')]},
        loc('BA9A.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9A.py'),
                                       'args')]},
        loc('BA9B.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9B.py'),
                                       'Actual')]},
        loc('BA9C.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9C.py'),
                                       'args')]},
        loc('BA9D.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9D.py'),
                                       'Actual')]},
        loc('BA9E.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9E.py'),
                                       'Actual')]},
        loc('BA9F.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': None},
        loc('BA9G.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9G.py'),
                                       'a')]},
        loc('BA9H.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9H.py'),
                                       'args')]},
        loc('BA9I.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': None},
        loc('BA9J.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9J.py'),
                                       'Actual')]},
        loc('BA9K.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9K.py'),
                                       'args')]},
        loc('BA9L.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9L.py'),
                                       'args')]},
        loc('BA9M.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9M.py'),
                                       'args')]},
        loc('BA9N.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9N.py'),
                                       'Actual')]},
        loc('BA9O.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9O.py'),
                                       'a')]},
        loc('BA9P.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9P.py'),
                                       'adj')]},
        loc('BA9Q.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9Q.py'),
                                       'a')]},
        loc('BA9R.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('BA9R.py'),
                                       'args')]},
        loc('BINS.py'): {'expanded-nodes': [],
                         'selected-nodes': [[('generic attribute',
        loc('BINS.py'),
        'start')]],
                         'top-node': [('generic attribute',
                                       loc('BINS.py'),
                                       'args')]},
        loc('CORR.py'): {'expanded-nodes': [],
                         'selected-nodes': [[('function def',
        loc('CORR.py'),
        'corr')]],
                         'top-node': [('generic attribute',
                                       loc('CORR.py'),
                                       'a')]},
        loc('DBRU.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('DBRU.py'),
                                       'a')]},
        loc('DDEG.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('DDEG.py'),
                                       'A')]},
        loc('DEG.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('DEG.py'),
                                      'A')]},
        loc('FRMT.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('FRMT.py'),
                                       'best')]},
        loc('GASM.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('GASM.py'),
                                       'f')]},
        loc('GBK.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('GBK.py'),
                                      'handle')]},
        loc('GLOB.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('GLOB.py'),
                                       'd')]},
        loc('GREP.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('function def',
                                       loc('GREP.py'),
                                       'count_kmers')]},
        loc('INS.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('INS.py'),
                                      'a')]},
        loc('INV.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('INV.py'),
                                      'A')]},
        loc('KMP.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('KMP.py'),
                                      'f')]},
        loc('LONG.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('function def',
                                       loc('LONG.py'),
                                       'combine')]},
        loc('MED.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('MED.py'),
                                      'A')]},
        loc('MER.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('MER.py'),
                                      'A')]},
        loc('MPRT.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('MPRT.py'),
                                       'args')]},
        loc('MS.py'): {'expanded-nodes': [],
                       'selected-nodes': [],
                       'top-node': [('generic attribute',
                                     loc('MS.py'),
                                     'a')]},
        loc('PAR.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('PAR.py'),
                                      'A')]},
        loc('PAR3.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('PAR3.py'),
                                       'A')]},
        loc('PCOV.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('function def',
                                       loc('PCOV.py'),
                                       'pcov')]},
        loc('PTRA.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('PTRA.py'),
                                       'coding_dna')]},
        loc('QS.py'): {'expanded-nodes': [],
                       'selected-nodes': [],
                       'top-node': [('generic attribute',
                                     loc('QS.py'),
                                     'A')]},
        loc('README.md'): {'expanded-nodes': [],
                           'selected-nodes': [],
                           'top-node': None},
        loc('align.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('function def',
        loc('align.py'),
        'align')]},
        loc('alph.py'): {'expanded-nodes': [],
                         'selected-nodes': [[('generic attribute',
        loc('alph.py'),
        'String')]],
                         'top-node': [('generic attribute',
                                       loc('alph.py'),
                                       'args')]},
        loc('assemble.py'): {'expanded-nodes': [],
                             'selected-nodes': [[('function def',
        loc('assemble.py'),
        'construct_from_gapped')]],
                             'top-node': [('function def',
        loc('assemble.py'),
        'construct_from_gapped')]},
        loc('bf.py'): {'expanded-nodes': [],
                       'selected-nodes': [[('generic attribute',
        loc('bf.py'),
        '_')]],
                       'top-node': [('generic attribute',
                                     loc('bf.py'),
                                     'args')]},
        loc('bfs.py'): {'expanded-nodes': [],
                        'selected-nodes': [[('generic attribute',
        loc('bfs.py'),
        'start')]],
                        'top-node': [('generic attribute',
                                      loc('bfs.py'),
                                      'args')]},
        loc('bip.py'): {'expanded-nodes': [],
                        'selected-nodes': [[('generic attribute',
        loc('bip.py'),
        'f')]],
                        'top-node': [('generic attribute',
                                      loc('bip.py'),
                                      'f')]},
        loc('bryant.py'): {'expanded-nodes': [],
                           'selected-nodes': [[('generic attribute',
        loc('bryant.py'),
        'args')]],
                           'top-node': [('generic attribute',
        loc('bryant.py'),
        'args')]},
        loc('cat.py'): {'expanded-nodes': [],
                        'selected-nodes': [[('generic attribute',
        loc('cat.py'),
        'start')]],
                        'top-node': [('generic attribute',
                                      loc('cat.py'),
                                      'args')]},
        loc('cc.py'): {'expanded-nodes': [],
                       'selected-nodes': [[('generic attribute',
        loc('cc.py'),
        '_')]],
                       'top-node': [('generic attribute',
                                     loc('cc.py'),
                                     'count')]},
        loc('chbp.py'): {'expanded-nodes': [],
                         'selected-nodes': [[('generic attribute',
        loc('chbp.py'),
        'start')]],
                         'top-node': [('generic attribute',
                                       loc('chbp.py'),
                                       'args')]},
        loc('cntq.py'): {'expanded-nodes': [],
                         'selected-nodes': [[('generic attribute',
        loc('cntq.py'),
        'start')]],
                         'top-node': [('generic attribute',
                                       loc('cntq.py'),
                                       'args')]},
        loc('combinatorics.py'): {'expanded-nodes': [],
                                  'selected-nodes': [[('function def',
        loc('combinatorics.py'),
        'valid_bonds')]],
                                  'top-node': [('function def',
        loc('combinatorics.py'),
        'catmotz')]},
        loc('conv.py'): {'expanded-nodes': [],
                         'selected-nodes': [None],
                         'top-node': None},
        loc('count_kmers.py'): {'expanded-nodes': [],
                                'selected-nodes': [[('function def',
        loc('count_kmers.py'),
        'reverse_complement')]],
                                'top-node': [('function def',
        loc('count_kmers.py'),
        'accumulate')]},
        loc('cset.py'): {'expanded-nodes': [],
                         'selected-nodes': [[('generic attribute',
        loc('cset.py'),
        'start')]],
                         'top-node': [('generic attribute',
                                       loc('cset.py'),
                                       'args')]},
        loc('cstr.py'): {'expanded-nodes': [],
                         'selected-nodes': [[('generic attribute',
        loc('cstr.py'),
        'start')]],
                         'top-node': [('generic attribute',
                                       loc('cstr.py'),
                                       'args')]},
        loc('ctbl.py'): {'expanded-nodes': [],
                         'selected-nodes': [[('generic attribute',
        loc('ctbl.py'),
        'tree')]],
                         'top-node': [('generic attribute',
                                       loc('ctbl.py'),
                                       'args')]},
        loc('cte.py'): {'expanded-nodes': [],
                        'selected-nodes': [[('function def',
        loc('cte.py'),
        'create_graphs')]],
                        'top-node': [('function def',
                                      loc('cte.py'),
                                      'create_graphs')]},
        loc('ctea.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('ctea.py'),
                                       'args')]},
        loc('dag.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('dag.py'),
                                      'f')]},
        loc('dij.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('dij.py'),
                                      'args')]},
        loc('dna.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('dna.py'),
                                      'args')]},
        loc('edit.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('edit.py'),
                                       'd')]},
        loc('edta.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('edta.py'),
                                       'args')]},
        loc('eubt.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('eubt.py'),
                                       'args')]},
        loc('fasta.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('class def',
        loc('fasta.py'),
        'FastaContent')]},
        loc('fibo.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('fibo.py'),
                                       'args')]},
        loc('findtests.py'): {'expanded-nodes': [],
                              'selected-nodes': [],
                              'top-node': [('generic attribute',
        loc('findtests.py'),
        'args')]},
        loc('fragile.py'): {'expanded-nodes': [],
                            'selected-nodes': [],
                            'top-node': [('function def',
        loc('fragile.py'),
        'bergeron')]},
        loc('full.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('full.py'),
                                       'L')]},
        loc('gaff.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('function def',
                                       loc('gaff.py'),
                                       'gaff')]},
        loc('gcon.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('function def',
                                       loc('gcon.py'),
                                       'gcon')]},
        loc('graphs.py'): {'expanded-nodes': [],
                           'selected-nodes': [[('function def',
        loc('graphs.py'),
        'dij')]],
                           'top-node': [('function def',
        loc('graphs.py'),
        'bf')]},
        loc('gs.py'): {'expanded-nodes': [],
                       'selected-nodes': [],
                       'top-node': [('generic attribute',
                                     loc('gs.py'),
                                     'edges')]},
        loc('hdag.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('hdag.py'),
                                       'g')]},
        loc('hea.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('hea.py'),
                                      'A')]},
        loc('helpers.py'): {'expanded-nodes': [],
                            'selected-nodes': [],
                            'top-node': [('function def',
        loc('helpers.py'),
        'create_adjacency')]},
        loc('hmm.py'): {'expanded-nodes': [[('class def',
        loc('hmm.py'),
        'Test_10_HMM')]],
                        'selected-nodes': [],
                        'top-node': [('function def',
                                      loc('hmm.py'),
                                      'AlignSequence')]},
        loc('itwv.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('itwv.py'),
                                       'args')]},
        loc('ksim.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('ksim.py'),
                                       'a')]},
        loc('laff.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('laff.py'),
                                       'args')]},
        loc('lcsq.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('function def',
                                       loc('lcsq.py'),
                                       'lcsq')]},
        loc('ling.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('ling.py'),
                                       'args')]},
        loc('loca.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('loca.py'),
                                       'd')]},
        loc('lrep.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('lrep.py'),
                                       'args')]},
        loc('maj.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('maj.py'),
                                      'As')]},
        loc('mend.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('mend.py'),
                                       'args')]},
        loc('mgap.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('mgap.py'),
                                       'args')]},
        loc('mmch.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('mmch.py'),
                                       'args')]},
        loc('motz.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('motz.py'),
                                       'args')]},
        loc('mrep.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('mrep.py'),
                                       'args')]},
        loc('mult.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('mult.py'),
                                       'Alignment')]},
        loc('newick.py'): {'expanded-nodes': [],
                           'selected-nodes': [[('function def',
        loc('newick.py'),
        'display')]],
                           'top-node': [('function def',
        loc('newick.py'),
        'display')]},
        loc('nwc.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('nwc.py'),
                                      'args')]},
        loc('nwck.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('nwck.py'),
                                       'ancestors')]},
        loc('oap.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('oap.py'),
                                      'args')]},
        loc('orfr.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('orfr.py'),
                                       'coding_dna')]},
        loc('osym.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('osym.py'),
                                       'args')]},
        loc('pdpl.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('pdpl.py'),
                                       'args')]},
        loc('phylogeny.py'): {'expanded-nodes': [[('function def',
        loc('phylogeny.py'),
        'NumberBinaryTrees')],
        [('class def',
          loc('phylogeny.py'),
          'TestPhylogeny')]],
                              'selected-nodes': [[('function def',
        loc('phylogeny.py'),
        'NumberBinaryTrees')]],
                              'top-node': [('function def',
        loc('phylogeny.py'),
        'AdaptSmallParsimonyToUnrootedTrees')]},
        loc('pmch.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('pmch.py'),
                                       'args')]},
        loc('prsm.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('prsm.py'),
                                       'i')]},
        loc('ps.py'): {'expanded-nodes': [],
                       'selected-nodes': [],
                       'top-node': [('generic attribute',
                                     loc('ps.py'),
                                     'A')]},
        loc('qrt.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('qrt.py'),
                                      'args')]},
        loc('qrtd.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('qrtd.py'),
                                       'args')]},
        loc('qrtd1.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('qrtd1.py'),
        'args')]},
        loc('rear.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('rear.py'),
                                       'd')]},
        loc('reference_tables.py'): {'expanded-nodes': [[('class def',
        loc('reference_tables.py'),
        'Test_Amino_acids')]],
                                     'selected-nodes': [[('class def',
        loc('reference_tables.py'),
        'AminoAcid')]],
                                     'top-node': [('class def',
        loc('reference_tables.py'),
        'AminoAcid')]},
        loc('replication.py'): {'expanded-nodes': [],
                                'selected-nodes': [],
                                'top-node': [('function def',
        loc('replication.py'),
        'countOccurrences')]},
        loc('revp.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('revp.py'),
                                       'a')]},
        loc('rna.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('rna.py'),
                                      'args')]},
        loc('rnas.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('rnas.py'),
                                       'args')]},
        loc('rosalind.py'): {'expanded-nodes': [],
                             'selected-nodes': [],
                             'top-node': [('function def',
        loc('rosalind.py'),
        'afrq')]},
        loc('rsub.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('rsub.py'),
                                       'args')]},
        loc('sc.py'): {'expanded-nodes': [],
                       'selected-nodes': [],
                       'top-node': [('generic attribute',
                                     loc('sc.py'),
                                     'edges')]},
        loc('scc.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('generic attribute',
                                      loc('scc.py'),
                                      'adj')]},
        loc('scratch.py'): {'expanded-nodes': [],
                            'selected-nodes': [],
                            'top-node': [('function def',
        loc('scratch.py'),
        'ensure_all_nodes_have_names')]},
        loc('scsp.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('function def',
                                       loc('scsp.py'),
                                       'scsp')]},
        loc('sdag.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('sdag.py'),
                                       'adjacency')]},
        loc('sequence.py'): {'expanded-nodes': [],
                             'selected-nodes': [],
                             'top-node': [('function def',
        loc('sequence.py'),
        'distanceBetweenPatternAndStrings')]},
        loc('sgra.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': None},
        loc('sims.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('sims.py'),
                                       'args')]},
        loc('smgb.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('smgb.py'),
                                       'a')]},
        loc('snarf.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('class def',
        loc('snarf.py'),
        'PeptideIdentification')]},
        loc('snarfed.py'): {'expanded-nodes': [],
                            'selected-nodes': [],
                            'top-node': [('class def',
        loc('snarfed.py'),
        'SoftDecoding')]},
        loc('snp.py'): {'expanded-nodes': [],
                        'selected-nodes': [],
                        'top-node': [('function def',
                                      loc('snp.py'),
                                      'BetterBWMatching')]},
        loc('sort.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('sort.py'),
                                       'd')]},
        loc('spec.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('spec.py'),
                                       'o')]},
        loc('spectrum.py'): {'expanded-nodes': [[('class def',
        loc('spectrum.py'),
        'TestSpectrum')]],
                             'selected-nodes': [],
                             'top-node': [('function def',
        loc('spectrum.py'),
        'complete_spectrum')]},
        loc('sptd.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('sptd.py'),
                                       'args')]},
        loc('sq.py'): {'expanded-nodes': [],
                       'selected-nodes': [],
                       'top-node': [('generic attribute',
                                     loc('sq.py'),
                                     'g')]},
        loc('suff.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('suff.py'),
                                       'args')]},
        loc('template.py'): {'expanded-nodes': [],
                             'selected-nodes': [],
                             'top-node': [('generic attribute',
        loc('template.py'),
        'args')]},
        loc('tree.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('tree.py'),
                                       'args')]},
        loc('trie.py'): {'expanded-nodes': [],
                         'selected-nodes': [],
                         'top-node': [('generic attribute',
                                       loc('trie.py'),
                                       'args')]},
        loc('ts.py'): {'expanded-nodes': [],
                       'selected-nodes': [],
                       'top-node': [('generic attribute',
                                     loc('ts.py'),
                                     'adj')]},
        loc('tyrocidine.py'): {'expanded-nodes': [],
                               'selected-nodes': [],
                               'top-node': [('function def',
        loc('tyrocidine.py'),
        'sequence')]},
        loc('ukkonen.py'): {'expanded-nodes': [],
                            'selected-nodes': [],
                            'top-node': [('function def',
        loc('ukkonen.py'),
        'build')]},
        loc('unknown:<untitled> #49'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('unknown:<untitled> #50'),
                      'to_adjacency_matrix')]}},
                                'browse_mode': 'Current Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {'Derived Classes': False,
        'Imported': False,
        'Modules': True}}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [3,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.28341384863124,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': '',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': True,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 40,
                                       'fReplaceText': 'get_highest_scoring_alignment',
                                       'fReverse': False,
                                       'fSearchText': 'gibbs',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': 'Right',
                                       'fReverse': False,
                                       'fSearchText': 'print',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {},
                       'launch-id': None,
                       'sel-line': 2,
                       'sel-line-start': 159,
                       'selection_end': 159,
                       'selection_start': 159,
                       'zoom': 0}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.8,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': ''})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('../AppData/Local/Programs/Python/Python312/Lib/unittest/case.py'),
        {'attrib-starts': [('TestCase|0|',
                            344),
                           ('TestCase|0|.fail|0|',
                            712)],
         'code-line': '        raise self.failureException(msg)\r\n',
         'first-line': 709,
         'folded-linenos': [],
         'sel-line': 714,
         'sel-line-start': 26527,
         'selection_end': 26527,
         'selection_start': 26527,
         'zoom': 0},
        1720580658.314293],
        [loc('sequence.py'),
         {'attrib-starts': [('Test_2_Sequence|0|',
                             365),
                            ('Test_2_Sequence|0|.test_ba2e|0|',
                             415)],
          'code-line': '\r\n',
          'first-line': 421,
          'folded-linenos': [],
          'sel-line': 428,
          'sel-line-start': 14030,
          'selection_end': 14030,
          'selection_start': 14030,
          'zoom': 0},
         1720580801.000349],
        [loc('sequence.py'),
         {'attrib-starts': [('Test_2_Sequence|0|',
                             365),
                            ('Test_2_Sequence|0|.test_ba2f|0|',
                             429)],
          'code-line': '            (c,x) = randomized_motif_search_driver(8, 5,[\r\n',
          'first-line': 421,
          'folded-linenos': [],
          'sel-line': 435,
          'sel-line-start': 14217,
          'selection_end': 14267,
          'selection_start': 14237,
          'zoom': 0},
         1720580942.758186],
        [loc('sequence.py'),
         {'attrib-starts': [('randomized_motif_search_driver|0|',
                             238)],
          'code-line': '        (sc,motifs) =randomized_motif_search(k,t,dna)\r\n',
          'first-line': 226,
          'folded-linenos': [],
          'sel-line': 245,
          'sel-line-start': 7740,
          'selection_end': 7784,
          'selection_start': 7761,
          'zoom': 0},
         1720580960.952694],
        [loc('sequence.py'),
         {'attrib-starts': [('randomized_motif_search|0|',
                             162)],
          'code-line': '        profile = Profile(motifs)\r\n',
          'first-line': 233,
          'folded-linenos': [],
          'sel-line': 240,
          'sel-line-start': 7449,
          'selection_end': 7467,
          'selection_start': 7467,
          'zoom': 0},
         1720581291.3879492],
        [loc('sequence.py'),
         {'attrib-starts': [('randomized_motif_search|0|',
                             162)],
          'code-line': '        profile = Profile(motifs)\r\n',
          'first-line': 159,
          'folded-linenos': [],
          'sel-line': 240,
          'sel-line-start': 7445,
          'selection_end': 7463,
          'selection_start': 7463,
          'zoom': 0},
         1720581296.1612992],
        [loc('sequence.py'),
         {'attrib-starts': [('randomized_motif_search|0|',
                             162),
                            ('randomized_motif_search|0|.Motifs|0|',
                             201)],
          'code-line': '        k = get_k(profile)\r\n',
          'first-line': 198,
          'folded-linenos': [],
          'sel-line': 210,
          'sel-line-start': 6481,
          'selection_end': 6493,
          'selection_start': 6493,
          'zoom': 0},
         1720581347.1836264],
        [loc('sequence.py'),
         {'attrib-starts': [('randomized_motif_search|0|',
                             162),
                            ('randomized_motif_search|0|.Motifs|0|',
                             201)],
          'code-line': '        k = get_k(profile)\r\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 210,
          'sel-line-start': 6481,
          'selection_end': 6493,
          'selection_start': 6493,
          'zoom': 0},
         1720581356.0534103],
        [loc('sequence.py'),
         {'attrib-starts': [('medianString|0|',
                             68),
                            ('medianString|0|.findClosest|0|',
                             78)],
          'code-line': '            if distance > d(k_mer,dna):\r\n',
          'first-line': 88,
          'folded-linenos': [],
          'sel-line': 82,
          'sel-line-start': 2556,
          'selection_end': 2595,
          'selection_start': 2595,
          'zoom': 0},
         1720581471.050783],
        [loc('sequence.py'),
         {'attrib-starts': [('medianString|0|',
                             68),
                            ('medianString|0|.findClosest|0|',
                             78)],
          'code-line': '            if distance > d(k_mer,dna):\r\n',
          'first-line': 117,
          'folded-linenos': [],
          'sel-line': 82,
          'sel-line-start': 2548,
          'selection_end': 2587,
          'selection_start': 2587,
          'zoom': 0},
         1720581476.7984169],
        [loc('sequence.py'),
         {'attrib-starts': [('medianString|0|',
                             68),
                            ('medianString|0|.findClosest|0|',
                             78)],
          'code-line': '            if distance > d(k_mer,dna):\r\n',
          'first-line': 77,
          'folded-linenos': [],
          'sel-line': 82,
          'sel-line-start': 2548,
          'selection_end': 2587,
          'selection_start': 2587,
          'zoom': 0},
         1720581490.2166126],
        [loc('sequence.py'),
         {'attrib-starts': [('randomized_motif_search_driver|0|',
                             248)],
          'code-line': '            mm = motifs\r\n',
          'first-line': 235,
          'folded-linenos': [],
          'sel-line': 258,
          'sel-line-start': 7945,
          'selection_end': 7962,
          'selection_start': 7962,
          'zoom': 0},
         1720581970.955691],
        [loc('sequence.py'),
         {'attrib-starts': [],
          'code-line': 'from random import randint, random\r\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 19,
          'sel-line-start': 802,
          'selection_end': 802,
          'selection_start': 802,
          'zoom': 0},
         1720582062.757138],
        [loc('../AppData/Local/Programs/Python/Python312/Lib/unittest/case.py'),
         {'attrib-starts': [],
          'code-line': 'from . import result\r\n',
          'first-line': 9,
          'folded-linenos': [],
          'sel-line': 14,
          'sel-line-start': 209,
          'selection_end': 209,
          'selection_start': 209,
          'zoom': 0},
         1720582072.8690171],
        [loc('sequence.py'),
         {'attrib-starts': [],
          'code-line': 'from random import randint, random\r\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 19,
          'sel-line-start': 802,
          'selection_end': 802,
          'selection_start': 802,
          'zoom': 0},
         1720582099.2471788],
        [loc('sequence.py'),
         {'attrib-starts': [],
          'code-line': 'from random import randint, random\r\n',
          'first-line': 45,
          'folded-linenos': [],
          'sel-line': 19,
          'sel-line-start': 802,
          'selection_end': 802,
          'selection_start': 802,
          'zoom': 0},
         1720582113.3414607],
        [loc('sequence.py'),
         {'attrib-starts': [('greedyMotifSearch|0|',
                             108)],
          'code-line': '\r\n',
          'first-line': 143,
          'folded-linenos': [],
          'sel-line': 156,
          'sel-line-start': 5120,
          'selection_end': 5120,
          'selection_start': 5120,
          'zoom': 0},
         1720582216.8482533],
        [loc('sequence.py'),
         {'attrib-starts': [('gibbs|0|',
                             257)],
          'code-line': '            bestMotifs = motifs\r\n',
          'first-line': 346,
          'folded-linenos': [],
          'sel-line': 351,
          'sel-line-start': 10853,
          'selection_end': 10878,
          'selection_start': 10878,
          'zoom': 0},
         1720582459.1381118],
        [loc('../AppData/Local/Programs/Python/Python312/Lib/unittest/case.py'),
         {'attrib-starts': [],
          'code-line': 'from . import result\r\n',
          'first-line': 9,
          'folded-linenos': [],
          'sel-line': 14,
          'sel-line-start': 209,
          'selection_end': 209,
          'selection_start': 209,
          'zoom': 0},
         1720582461.2198553],
        [loc('../AppData/Local/Programs/Python/Python312/Lib/unittest/case.py'),
         {'attrib-starts': [('TestCase|0|',
                             344),
                            ('TestCase|0|.fail|0|',
                             712)],
          'code-line': '        raise self.failureException(msg)\r\n',
          'first-line': 695,
          'folded-linenos': [],
          'sel-line': 714,
          'sel-line-start': 26527,
          'selection_end': 26527,
          'selection_start': 26527,
          'zoom': 0},
         1720582467.9438236]],
        20),
        'current-loc': None,
        'editor-state-list': [],
        'has-focus': True,
        'locked': False},
        []),
                               'open_files': []},
        'saved_notebook_display': None,
        'split_percents': {0: 0.5},
        'splits': 2,
        'tab_location': 'top',
        'traversal_pos': ((1,
                           0),
                          1720582476.9320621),
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {},
                 'splits': 1,
                 'tab_location': 'left',
                 'traversal_pos': ((0,
                                    0),
                                   1720580874.140327),
                 'user_data': {}},
        'window-alloc': (28,
                         -1,
                         1360,
                         732)}]}
guimgr.recent-documents = [loc('sequence.py')]
guimgr.visual-state = {loc('../../../Anaconda3/lib/site-packages/Bio/File.py'): {'attrib-starts': [('as_handle',
        57)],
        'first-line': 93,
        'folded-linenos': [],
        'sel-line': 112,
        'sel-line-start': 3870,
        'selection_end': 3870,
        'selection_start': 3870,
        'zoom': 0},
                       loc('../../../Anaconda3/lib/site-packages/Bio/SubsMat/MatrixInfo.py'): {'attrib-starts': [],
        'first-line': 765,
        'folded-linenos': [],
        'sel-line': 932,
        'sel-line-start': 59505,
        'selection_end': 59513,
        'selection_start': 59505,
        'zoom': 0},
                       loc('../../../Anaconda3/lib/site-packages/numpy/core/fromnumeric.py'): {'attrib-starts': [('argmax',
        910)],
        'first-line': 948,
        'folded-linenos': [],
        'sel-line': 967,
        'sel-line-start': 31833,
        'selection_end': 31833,
        'selection_start': 31833,
        'zoom': 0},
                       loc('../../../Anaconda3/lib/sre_parse.py'): {'attrib-starts': [('_parse',
        490)],
        'first-line': 762,
        'folded-linenos': [],
        'sel-line': 780,
        'sel-line-start': 29149,
        'selection_end': 29149,
        'selection_start': 29149,
        'zoom': 0},
                       loc('../../../Anaconda3/lib/unittest/case.py'): {'attrib-starts': [('TestCase',
        340),
        ('TestCase._baseAssertEqual',
         816)],
        'first-line': 801,
        'folded-linenos': [],
        'sel-line': 821,
        'sel-line-start': 31048,
        'selection_end': 31048,
        'selection_start': 31048,
        'zoom': 0},
                       loc('../../../Program Files (x86)/Wing IDE Personal 6.0/resources/builtin-pi-files/3.5/builtins.pi'): {'attrib-starts': [('print',
        2749)],
        'first-line': 2735,
        'folded-linenos': [],
        'sel-line': 2749,
        'sel-line-start': 86688,
        'selection_end': 86697,
        'selection_start': 86692,
        'zoom': 0},
                       loc('../../../Program Files (x86)/Wing Personal 7.2/resources/builtin-pi-files/__os__/win32/3.8/builtins.pi'): {'attrib-starts': [('iter|0|',
        1809)],
        'code-line': 'def iter(iterable):\n',
        'first-line': 1796,
        'folded-linenos': [],
        'sel-line': 1809,
        'sel-line-start': 54070,
        'selection_end': 54078,
        'selection_start': 54074,
        'zoom': 0},
                       loc('../../../Program Files/Wing Personal 10/resources/builtin-pi-files/__os__/win32/3.12/builtins.pi'): {'attrib-starts': [('dict|0|',
        1487)],
        'code-line': '  def update(self, E=None, **F):\n',
        'first-line': 1533,
        'folded-linenos': [],
        'sel-line': 1545,
        'sel-line-start': 44980,
        'selection_end': 44992,
        'selection_start': 44986,
        'zoom': 0},
                       loc('../../../Program Files/Wing Personal 10/resources/typeshed/stdlib/3/unittest/case.pyi'): {'attrib-starts': [('TestCase|0|',
        48)],
        'code-line': '    def assertDictContainsSubset(self, subset: Mapping[Any, Any], dictionary: Mapping[Any, Any], msg: object = ...) -> None: ...\n',
        'first-line': 233,
        'folded-linenos': [],
        'sel-line': 245,
        'sel-line-start': 10920,
        'selection_end': 10952,
        'selection_start': 10928,
        'zoom': 0},
                       loc('../../../Program Files/Wing Personal 9/resources/builtin-pi-files/__os__/win32/3.11/builtins.pi'): {'attrib-starts': [],
        'code-line': 'class ValueError(Exception):\n',
        'first-line': 465,
        'folded-linenos': [],
        'sel-line': 478,
        'sel-line-start': 9811,
        'selection_end': 9827,
        'selection_start': 9817,
        'zoom': 0},
                       loc('../../../Program Files/Wing Personal 9/resources/builtin-pi-files/__os__/win32/3.11/math.pi'): {'attrib-starts': [],
        'code-line': 'def isinf(x):\n',
        'first-line': 260,
        'folded-linenos': [],
        'sel-line': 273,
        'sel-line-start': 6422,
        'selection_end': 6431,
        'selection_start': 6426,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/collections/__init__.py'): {'attrib-starts': [],
        'code-line': "'''This module implements specialized container datatypes providing\r\n",
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/encodings/cp1252.py'): {'attrib-starts': [('IncrementalDecoder|0|',
        20),
        ('IncrementalDecoder|0|.decode|0|',
         21)],
        'code-line': '        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\r\n',
        'first-line': 9,
        'folded-linenos': [],
        'sel-line': 22,
        'sel-line-start': 696,
        'selection_end': 696,
        'selection_start': 696,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/ntpath.py'): {'attrib-starts': [('basename|0|',
        239)],
        'code-line': '    return split(p)[1]\r\n',
        'first-line': 221,
        'folded-linenos': [],
        'sel-line': 241,
        'sel-line-start': 8557,
        'selection_end': 8557,
        'selection_start': 8557,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/operator.py'): {'attrib-starts': [],
        'code-line': '"""\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Align/substitution_matrices/__init__.py'): {'attrib-starts': [],
        'code-line': 'def load(name=None):\r\n',
        'first-line': 495,
        'folded-linenos': [],
        'sel-line': 499,
        'sel-line-start': 17605,
        'selection_end': 17613,
        'selection_start': 17609,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/BaseTree.py'): {'attrib-starts': [('TreeMixin|0|',
        261)],
        'code-line': '    def get_path(self, target=None, **kwargs):\r\n',
        'first-line': 370,
        'folded-linenos': [],
        'sel-line': 382,
        'sel-line-start': 13644,
        'selection_end': 13660,
        'selection_start': 13652,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/NewickIO.py'): {'attrib-starts': [('Parser|0|',
        95),
        ('Parser|0|._parse_tree|0|',
         130)],
        'code-line': '            raise NewickError(\r\n',
        'first-line': 188,
        'folded-linenos': [],
        'sel-line': 208,
        'sel-line-start': 6716,
        'selection_end': 6716,
        'selection_start': 6716,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/_io.py'): {'attrib-starts': [],
        'code-line': 'def read(file, format, **kwargs):\r\n',
        'first-line': 50,
        'folded-linenos': [],
        'sel-line': 51,
        'sel-line-start': 1344,
        'selection_end': 1352,
        'selection_start': 1348,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/Bio/Phylo/_utils.py'): {'attrib-starts': [],
        'code-line': 'def draw(\r\n',
        'first-line': 167,
        'folded-linenos': [],
        'sel-line': 179,
        'sel-line-start': 6552,
        'selection_end': 6560,
        'selection_start': 6556,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/deprecated/classic.py'): {'attrib-starts': [],
        'code-line': 'def deprecated(*args, **kwargs):\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 179,
        'sel-line-start': 6465,
        'selection_end': 6479,
        'selection_start': 6469,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/__init__.py'): {'attrib-starts': [],
        'code-line': '"""\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/core/fromnumeric.py'): {'attrib-starts': [('prod|0|',
        2927)],
        'code-line': "    return _wrapreduction(a, np.multiply, 'prod', axis, dtype, out,\r\n",
        'first-line': 3026,
        'folded-linenos': [],
        'sel-line': 3044,
        'sel-line-start': 103021,
        'selection_end': 103021,
        'selection_start': 103021,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/core/multiarray.pyi'): {'attrib-starts': [],
        'code-line': 'def zeros(\r\n',
        'first-line': 211,
        'folded-linenos': [],
        'sel-line': 224,
        'sel-line-start': 4610,
        'selection_end': 4619,
        'selection_start': 4614,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/lib/index_tricks.py'): {'attrib-starts': [],
        'code-line': 'def fill_diagonal(a, val, wrap=False):\r\n',
        'first-line': 766,
        'folded-linenos': [],
        'sel-line': 779,
        'sel-line-start': 25048,
        'selection_end': 25065,
        'selection_start': 25052,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/numpy/testing/_private/utils.py'): {'attrib-starts': [('assert_array_compare|0|',
        700)],
        'code-line': '            raise AssertionError(msg)\r\n',
        'first-line': 838,
        'folded-linenos': [],
        'sel-line': 843,
        'sel-line-start': 31158,
        'selection_end': 31158,
        'selection_start': 31158,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/site-packages/scipy/special/_basic.py'): {'attrib-starts': [],
        'code-line': 'def comb(N, k, exact=False, repetition=False, legacy=True):\r\n',
        'first-line': 2158,
        'folded-linenos': [],
        'sel-line': 2162,
        'sel-line-start': 63860,
        'selection_end': 63868,
        'selection_start': 63864,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/string.py'): {'attrib-starts': [],
        'code-line': '"""A collection of string constants.\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/timeit.py'): {'attrib-starts': [],
        'code-line': '#! /usr/bin/env python3\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/unittest/case.py'): {'attrib-starts': [('TestCase|0|',
        343),
        ('TestCase|0|.fail|0|',
         700)],
        'code-line': '        raise self.failureException(msg)\r\n',
        'first-line': 697,
        'folded-linenos': [],
        'sel-line': 702,
        'sel-line-start': 26084,
        'selection_end': 26084,
        'selection_start': 26084,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python311/Lib/unittest/main.py'): {'attrib-starts': [('TestProgram|0|',
        55),
        ('TestProgram|0|.__init__|0|',
         65)],
        'code-line': '            self.module = __import__(module)\r\n',
        'first-line': 65,
        'folded-linenos': [],
        'sel-line': 70,
        'sel-line-start': 2503,
        'selection_end': 2503,
        'selection_start': 2503,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python312/Lib/site-packages/numpy/__init__.py'): {'attrib-starts': [('__getattr__|0|',
        303)],
        'code-line': '            raise AttributeError(__former_attrs__[attr])\r\n',
        'first-line': 327,
        'folded-linenos': [],
        'sel-line': 337,
        'sel-line-start': 12049,
        'selection_end': 12049,
        'selection_start': 12049,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python312/Lib/site-packages/numpy/testing/_private/utils.py'): {'attrib-starts': [('assert_array_compare|0|',
        641)],
        'code-line': '            raise AssertionError(msg)\r\n',
        'first-line': 693,
        'folded-linenos': [],
        'sel-line': 712,
        'sel-line-start': 25835,
        'selection_end': 25835,
        'selection_start': 25835,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python312/Lib/unittest/case.py'): {'attrib-starts': [('TestCase|0|',
        344),
        ('TestCase|0|.fail|0|',
         712)],
        'code-line': '        raise self.failureException(msg)\r\n',
        'first-line': 695,
        'folded-linenos': [],
        'sel-line': 714,
        'sel-line-start': 26527,
        'selection_end': 26527,
        'selection_start': 26527,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/Bio/File.py'): {'attrib-starts': [('as_handle|0|',
        28)],
        'code-line': '        with open(handleish, mode, **kwargs) as fp:\n',
        'first-line': 51,
        'folded-linenos': [],
        'sel-line': 71,
        'sel-line-start': 2212,
        'selection_end': 2212,
        'selection_start': 2212,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/Bio/Phylo/_io.py'): {'attrib-starts': [('read|0|',
        51)],
        'code-line': 'def read(file, format, **kwargs):\n',
        'first-line': 26,
        'folded-linenos': [],
        'sel-line': 51,
        'sel-line-start': 1293,
        'selection_end': 1301,
        'selection_start': 1297,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/Bio/Seq.py'): {'attrib-starts': [('translate|0|',
        2371)],
        'code-line': '                raise ValueError("Bad table argument") from None\n',
        'first-line': 2460,
        'folded-linenos': [],
        'sel-line': 2480,
        'sel-line-start': 86460,
        'selection_end': 86460,
        'selection_start': 86460,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/numpy/_distributor_init.py'): {'attrib-starts': [],
        'code-line': '            for filename in glob.glob(os.path.join(libs_dir,\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 21,
        'sel-line-start': 650,
        'selection_end': 650,
        'selection_start': 650,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/site-packages/tarjan/__init__.py'): {'attrib-starts': [('tarjan|0|',
        80)],
        'code-line': 'def tarjan(g):\n',
        'first-line': 92,
        'folded-linenos': [],
        'sel-line': 80,
        'sel-line-start': 3056,
        'selection_end': 3066,
        'selection_start': 3060,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python38/Lib/unittest/case.py'): {'attrib-starts': [('TestCase|0|',
        374),
        ('TestCase|0|._baseAssertEqual|0|',
         899)],
        'code-line': '            raise self.failureException(msg)\r\n',
        'first-line': 884,
        'folded-linenos': [],
        'sel-line': 904,
        'sel-line-start': 34714,
        'selection_end': 34714,
        'selection_start': 34714,
        'zoom': 0},
                       loc('../AppData/Local/Programs/Python/Python38/lib/argparse.py'): {'attrib-starts': [('ArgumentParser|0|',
        1618),
        ('ArgumentParser|0|.parse_args|0|',
         1766)],
        'code-line': '        args, argv = self.parse_known_args(args, namespace)\r\n',
        'first-line': 1747,
        'folded-linenos': [],
        'sel-line': 1767,
        'sel-line-start': 65919,
        'selection_end': 65919,
        'selection_start': 65919,
        'zoom': 0},
                       loc('../AppData/Local/Temp/rosalind.py-rev749.svn000.tmp.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('../AppData/Local/Wing Personal 7/pi-cache/3.8/C/Users/Simon/AppData/Local/Programs/Python/Python38/Lib/site-packages/numpy/core/_multiarray_umath.pi'): {'attrib-starts': [('zeros|0|',
        11334)],
        'code-line': 'def zeros():\n',
        'first-line': 11321,
        'folded-linenos': [],
        'sel-line': 11334,
        'sel-line-start': 397112,
        'selection_end': 397121,
        'selection_start': 397116,
        'zoom': 0},
                       loc('../AppData/Roaming/Python/Python38/site-packages/pandas/core/indexing.py'): {'attrib-starts': [('_iLocIndexer|0|',
        1968),
        ('_iLocIndexer|0|._validate_integer|0|',
         2044)],
        'code-line': '            raise IndexError("single positional indexer is out-of-bounds")\r\n',
        'first-line': 2042,
        'folded-linenos': [],
        'sel-line': 2062,
        'sel-line-start': 73225,
        'selection_end': 73225,
        'selection_start': 73225,
        'zoom': 0},
                       loc('../cluster/fcs_params.py'): {'attrib-starts': [],
        'first-line': 11,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('../dynamics/template.py'): {'attrib-starts': [],
        'code-line': 'from argparse import ArgumentParser\r\n',
        'first-line': 3,
        'folded-linenos': [],
        'sel-line': 20,
        'sel-line-start': 775,
        'selection_end': 942,
        'selection_start': 775,
        'zoom': 0},
                       loc('../learn/motifs.py'): {'attrib-starts': [],
        'code-line': "    plt.savefig(os.path.basename(__file__).split('.')[0] )\r\n",
        'first-line': 179,
        'folded-linenos': [],
        'sel-line': 197,
        'sel-line-start': 7575,
        'selection_end': 7632,
        'selection_start': 7591,
        'zoom': 0},
                       loc('2sat.py'): {'attrib-starts': [],
        'code-line': '                status,Solution = two_sat(problem )\r\n',
        'first-line': 60,
        'folded-linenos': [],
        'sel-line': 99,
        'sel-line-start': 3079,
        'selection_end': 3079,
        'selection_start': 3079,
        'zoom': 0},
                       loc('2sum.py'): {'attrib-starts': [('f2sum|0|',
        19)],
        'code-line': '    return best(pairs) if len(pairs)>0 else (-1,-1)\r\n',
        'first-line': 25,
        'folded-linenos': [],
        'sel-line': 43,
        'sel-line-start': 1468,
        'selection_end': 1483,
        'selection_start': 1479,
        'zoom': 0},
                       loc('3sum.py'): {'attrib-starts': [],
        'code-line': '#!/usr/bin/env python\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('ASMQ.py'): {'attrib-starts': [],
        'code-line': '#!/usr/bin/env python\r\n',
        'first-line': 2,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('B10A.py'): {'attrib-starts': [('ba10A',
        17)],
        'first-line': 6,
        'folded-linenos': [],
        'sel-line': 17,
        'sel-line-start': 787,
        'selection_end': 793,
        'selection_start': 793,
        'zoom': 0},
                       loc('BA10A.py'): {'attrib-starts': [],
        'code-line': "    print (ProbabilityHiddenPath('AABBBAABABAAAABBBBAABBABABBBAABBAAAABABAABBABABBAB',\r\n",
        'first-line': 21,
        'folded-linenos': [],
        'sel-line': 26,
        'sel-line-start': 853,
        'selection_end': 1063,
        'selection_start': 864,
        'zoom': 0},
                       loc('BA10B.py'): {'attrib-starts': [],
        'code-line': "    print (ProbabilityOutcomeGivenHiddenPath('xzyyxyzyxzyzxxzyzzxxzyxyxyxzxzyyzyzxzxzyxyzyyyzzxz', 'xyz',\r\n",
        'first-line': 21,
        'folded-linenos': [],
        'sel-line': 27,
        'sel-line-start': 886,
        'selection_end': 982,
        'selection_start': 982,
        'zoom': 0},
                       loc('BA10C.py'): {'attrib-starts': [],
        'code-line': '    Transition = np.array([\r\n',
        'first-line': 31,
        'folded-linenos': [],
        'sel-line': 31,
        'sel-line-start': 1008,
        'selection_end': 1189,
        'selection_start': 1008,
        'zoom': 0},
                       loc('BA10D.py'): {'attrib-starts': [],
        'code-line': "        Input,Expected                         = read_strings(f'data/OutcomeLikelihood.txt',init=0)\r\n",
        'first-line': 40,
        'folded-linenos': [],
        'sel-line': 53,
        'sel-line-start': 2163,
        'selection_end': 2262,
        'selection_start': 2171,
        'zoom': 0},
                       loc('BA10E.py'): {'attrib-starts': [],
        'code-line': 'from hmm import ConstructProfileHMM,formatEmission,formatTransition\r\n',
        'first-line': 101,
        'folded-linenos': [],
        'sel-line': 27,
        'sel-line-start': 900,
        'selection_end': 967,
        'selection_start': 935,
        'zoom': 0},
                       loc('BA10F.py'): {'attrib-starts': [],
        'code-line': '#!/usr/bin/env python\r\n',
        'first-line': 12,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('BA10G.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 27,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('BA10H.py'): {'attrib-starts': [],
        'code-line': "    parser.add_argument('--precision', default=3,                          help='Controls display of probabilities')\r\n",
        'first-line': 66,
        'folded-linenos': [],
        'sel-line': 58,
        'sel-line-start': 2139,
        'selection_end': 2287,
        'selection_start': 2139,
        'zoom': 0},
                       loc('BA10I.py'): {'attrib-starts': [],
        'code-line': 'from hmm      import ViterbiLearning,formatEmission,formatTransition\r\n',
        'first-line': 5,
        'folded-linenos': [],
        'sel-line': 25,
        'sel-line-start': 948,
        'selection_end': 1016,
        'selection_start': 984,
        'zoom': 0},
                       loc('BA10J.py'): {'attrib-starts': [],
        'code-line': 'from helpers  import create_hmm_from_strings, read_strings, format_list\r\n',
        'first-line': 10,
        'folded-linenos': [],
        'sel-line': 22,
        'sel-line-start': 889,
        'selection_end': 960,
        'selection_start': 949,
        'zoom': 0},
                       loc('BA10K.py'): {'attrib-starts': [],
        'code-line': '        Transitions,Emissions = BaumWelch(xs,alphabet,States,Transition,Emission,N=100)\r\n',
        'first-line': 36,
        'folded-linenos': [],
        'sel-line': 41,
        'sel-line-start': 1701,
        'selection_end': 1742,
        'selection_start': 1733,
        'zoom': 0},
                       loc('BA11B.py'): {'attrib-starts': [],
        'code-line': 'from spectrum import DecodeIdealSpectrum\r\n',
        'first-line': 5,
        'folded-linenos': [],
        'sel-line': 24,
        'sel-line-start': 857,
        'selection_end': 897,
        'selection_start': 878,
        'zoom': 0},
                       loc('BA11C.py'): {'attrib-starts': [],
        'code-line': "    print(' '.join(str(i) for i in CreatePeptideVector('STEQVPNQPYVWIHACNGVTADIFRAFHQVHFK')))\r\n",
        'first-line': 1,
        'folded-linenos': [],
        'sel-line': 22,
        'sel-line-start': 881,
        'selection_end': 935,
        'selection_start': 916,
        'zoom': 0},
                       loc('BA11D.py'): {'attrib-starts': [],
        'code-line': 'import numpy as np\r\n',
        'first-line': 13,
        'folded-linenos': [],
        'sel-line': 19,
        'sel-line-start': 809,
        'selection_end': 827,
        'selection_start': 827,
        'zoom': 0},
                       loc('BA11E.py'): {'attrib-starts': [],
        'code-line': "            f.write(f'{Result}\\n')\r\n",
        'first-line': 43,
        'folded-linenos': [],
        'sel-line': 49,
        'sel-line-start': 2153,
        'selection_end': 2187,
        'selection_start': 2165,
        'zoom': 0},
                       loc('BA11F.py'): {'attrib-starts': [],
        'code-line': '        Spectral = [int(s) for s in Input[0].split()]\r\n',
        'first-line': 36,
        'folded-linenos': [],
        'sel-line': 41,
        'sel-line-start': 1890,
        'selection_end': 1943,
        'selection_start': 1908,
        'zoom': 0},
                       loc('BA11G.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 25,
        'selection_end': 25,
        'selection_start': 25,
        'zoom': 0},
                       loc('BA11H.py'): {'attrib-starts': [],
        'code-line': '        Result = SizeSpectralDictionary( [int(s) for s in Input[0].split()],int(Input[1]),int(Input[2]))\r\n',
        'first-line': 25,
        'folded-linenos': [],
        'sel-line': 41,
        'sel-line-start': 1667,
        'selection_end': 1903,
        'selection_start': 1667,
        'zoom': 0},
                       loc('BA11I.py'): {'attrib-starts': [],
        'code-line': '                                    dtype=float)\r\n',
        'first-line': 36,
        'folded-linenos': [],
        'sel-line': 47,
        'sel-line-start': 2223,
        'selection_end': 2270,
        'selection_start': 2270,
        'zoom': 0},
                       loc('BA11J.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 25,
        'selection_end': 25,
        'selection_start': 25,
        'zoom': 0},
                       loc('BA4M.py'): {'attrib-starts': [],
        'code-line': '#!/usr/bin/env python\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('BA5A.py'): {'attrib-starts': [('number_of_coins',
        5)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 14,
        'sel-line-start': 500,
        'selection_end': 524,
        'selection_start': 524,
        'zoom': 0},
                       loc('BA5H.py'): {'attrib-starts': [],
        'code-line': '      d,s1,t1    = FindHighestScoringFittingAlignment(strings[0],strings[1])\r\n',
        'first-line': 16,
        'folded-linenos': [],
        'sel-line': 31,
        'sel-line-start': 1159,
        'selection_end': 1212,
        'selection_start': 1178,
        'zoom': 0},
                       loc('BA5I.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('BA5J.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('BA5K.py'): {'attrib-starts': [],
        'code-line': "        print (FindMiddleEdge('PLEASANTLY','MEASNLY'))\r\n",
        'first-line': 20,
        'folded-linenos': [],
        'sel-line': 34,
        'sel-line-start': 1471,
        'selection_end': 1500,
        'selection_start': 1486,
        'zoom': 0},
                       loc('BA5L.py'): {'attrib-starts': [],
        'code-line': '                          replace_score = substitution_matrices.load("BLOSUM62"),\r\n',
        'first-line': 88,
        'folded-linenos': [],
        'sel-line': 36,
        'sel-line-start': 1157,
        'selection_end': 1157,
        'selection_start': 1157,
        'zoom': 0},
                       loc('BA5M.py'): {'attrib-starts': [],
        'code-line': "    s,u,v,w = FindHighestScoringMultipleSequenceAlignment('ATATCCG','TCCGA','ATGTACTG')\r\n",
        'first-line': 12,
        'folded-linenos': [],
        'sel-line': 26,
        'sel-line-start': 950,
        'selection_end': 1037,
        'selection_start': 954,
        'zoom': 0},
                       loc('BA6A.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019-2021 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 25,
        'selection_end': 25,
        'selection_start': 25,
        'zoom': 0},
                       loc('BA6B.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019-2021 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 25,
        'selection_end': 25,
        'selection_start': 25,
        'zoom': 0},
                       loc('BA6C.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('BA6D.py'): {'attrib-starts': [],
        'code-line': '# Copyright (C) 2019-2021 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 25,
        'selection_end': 25,
        'selection_start': 25,
        'zoom': 0},
                       loc('BA6F.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('BA6G.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('BA6H.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 25,
        'selection_end': 25,
        'selection_start': 25,
        'zoom': 0},
                       loc('BA6I.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 25,
        'selection_end': 25,
        'selection_start': 25,
        'zoom': 0},
                       loc('BA6J.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('BA6K.py'): {'attrib-starts': [],
        'code-line': '#!/usr/bin/env python\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 21,
        'selection_start': 0,
        'zoom': 0},
                       loc('BA7A.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 12,
        'folded-linenos': [],
        'sel-line': 21,
        'sel-line-start': 875,
        'selection_end': 875,
        'selection_start': 875,
        'zoom': 0},
                       loc('BA7C.py'): {'attrib-starts': [],
        'code-line': 'import numpy as np\r\n',
        'first-line': 13,
        'folded-linenos': [],
        'sel-line': 19,
        'sel-line-start': 761,
        'selection_end': 779,
        'selection_start': 779,
        'zoom': 0},
                       loc('BA7D.py'): {'attrib-starts': [],
        'code-line': '#!/usr/bin/env python\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('BA7E.py'): {'attrib-starts': [],
        'code-line': 'from rosalind  import read_matrix\r\n',
        'first-line': 2,
        'folded-linenos': [],
        'sel-line': 20,
        'sel-line-start': 761,
        'selection_end': 783,
        'selection_start': 783,
        'zoom': 0},
                       loc('BA7F.py'): {'attrib-starts': [],
        'code-line': 'from phylogeny import SmallParsimony\r\n',
        'first-line': 3,
        'folded-linenos': [],
        'sel-line': 24,
        'sel-line-start': 938,
        'selection_end': 974,
        'selection_start': 960,
        'zoom': 0},
                       loc('BA8A.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('BA8B.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('BA8C.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('BA8D.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('BA8E.py'): {'attrib-starts': [('format|0|',
        21)],
        'code-line': '  def expand(links):\r\n',
        'first-line': 10,
        'folded-linenos': [],
        'sel-line': 22,
        'sel-line-start': 829,
        'selection_end': 841,
        'selection_start': 835,
        'zoom': 0},
                       loc('BA9A.py'): {'attrib-starts': [],
        'code-line': 'from   snp import create_trie\r\n',
        'first-line': 10,
        'folded-linenos': [],
        'sel-line': 23,
        'sel-line-start': 878,
        'selection_end': 907,
        'selection_start': 896,
        'zoom': 0},
                       loc('BA9B.py'): {'attrib-starts': [],
        'code-line': 'from snp import create_trie, MatchAll\r\n',
        'first-line': 12,
        'folded-linenos': [],
        'sel-line': 24,
        'sel-line-start': 854,
        'selection_end': 862,
        'selection_start': 859,
        'zoom': 0},
                       loc('BA9C.py'): {'attrib-starts': [],
        'code-line': '        for edge in tree.collectEdges():\r\n',
        'first-line': 46,
        'folded-linenos': [],
        'sel-line': 59,
        'sel-line-start': 2284,
        'selection_end': 2321,
        'selection_start': 2309,
        'zoom': 0},
                       loc('BA9D.py'): {'attrib-starts': [],
        'code-line': "        print (FindLongestRepeat('ATATCGTTTTATCGTT'))\r\n",
        'first-line': 25,
        'folded-linenos': [],
        'sel-line': 36,
        'sel-line-start': 1442,
        'selection_end': 1494,
        'selection_start': 1457,
        'zoom': 0},
                       loc('BA9E.py'): {'attrib-starts': [],
        'code-line': "        print (LongestSharedSubstring('panama',\r\n",
        'first-line': 24,
        'folded-linenos': [],
        'sel-line': 35,
        'sel-line-start': 1456,
        'selection_end': 1493,
        'selection_start': 1471,
        'zoom': 0},
                       loc('BA9F.py'): {'attrib-starts': [('FindShortestNonShared|0|',
        24)],
        'code-line': "    return ''\r\n",
        'first-line': 14,
        'folded-linenos': [],
        'sel-line': 28,
        'sel-line-start': 1024,
        'selection_end': 1024,
        'selection_start': 1024,
        'zoom': 0},
                       loc('BA9G.py'): {'attrib-starts': [],
        'code-line': "        print (SuffixArray('AACGATAGCGGTAGA$'))\r\n",
        'first-line': 27,
        'folded-linenos': [],
        'sel-line': 34,
        'sel-line-start': 1453,
        'selection_end': 1499,
        'selection_start': 1468,
        'zoom': 0},
                       loc('BA9H.py'): {'attrib-starts': [],
        'code-line': "        print (MatchPatternsUsingSuffixArray('AATCGGGTTCAATCGGGGT',['ATCG','GGGT']))\r\n",
        'first-line': 12,
        'folded-linenos': [],
        'sel-line': 32,
        'sel-line-start': 1357,
        'selection_end': 1440,
        'selection_start': 1372,
        'zoom': 0},
                       loc('BA9I.py'): {'attrib-starts': [],
        'code-line': "    print (BurrowsWheeler('GCGTGCCTGGTCA$'))\r\n",
        'first-line': 9,
        'folded-linenos': [],
        'sel-line': 23,
        'sel-line-start': 864,
        'selection_end': 906,
        'selection_start': 875,
        'zoom': 0},
                       loc('BA9J.py'): {'attrib-starts': [],
        'code-line': "        print (InverseBWT('TTCCTAACG$A'))\r\n",
        'first-line': 21,
        'folded-linenos': [],
        'sel-line': 33,
        'sel-line-start': 1435,
        'selection_end': 1475,
        'selection_start': 1450,
        'zoom': 0},
                       loc('BA9K.py'): {'attrib-starts': [],
        'code-line': "        print (LastToFirst('T$GACCA',3))\r\n",
        'first-line': 23,
        'folded-linenos': [],
        'sel-line': 34,
        'sel-line-start': 1420,
        'selection_end': 1459,
        'selection_start': 1435,
        'zoom': 0},
                       loc('BA9L.py'): {'attrib-starts': [],
        'code-line': '    args = parser.parse_args()\r\n',
        'first-line': 27,
        'folded-linenos': [],
        'sel-line': 32,
        'sel-line-start': 1326,
        'selection_end': 1346,
        'selection_start': 1346,
        'zoom': 0},
                       loc('BA9M.py'): {'attrib-starts': [],
        'code-line': "        print (BetterBWMatching('GGCGCCGC$TAGTCACACACGCCGTA',\r\n",
        'first-line': 27,
        'folded-linenos': [],
        'sel-line': 34,
        'sel-line-start': 1399,
        'selection_end': 1516,
        'selection_start': 1414,
        'zoom': 0},
                       loc('BA9N.py'): {'attrib-starts': [],
        'code-line': "        print (EvenBetterBWMatching('AATCGGGTTCAATCGGGGT', ['ATCG', 'GGGT'], K=5))\r\n",
        'first-line': 28,
        'folded-linenos': [],
        'sel-line': 43,
        'sel-line-start': 1748,
        'selection_end': 1829,
        'selection_start': 1763,
        'zoom': 0},
                       loc('BA9O.py'): {'attrib-starts': [],
        'code-line': '# FindApproximateMatches\r\n',
        'first-line': 20,
        'folded-linenos': [],
        'sel-line': 24,
        'sel-line-start': 905,
        'selection_end': 1260,
        'selection_start': 905,
        'zoom': 0},
                       loc('BA9P.py'): {'attrib-starts': [],
        'code-line': 'def colour2list(colour):\r\n',
        'first-line': 13,
        'folded-linenos': [],
        'sel-line': 25,
        'sel-line-start': 889,
        'selection_end': 1000,
        'selection_start': 889,
        'zoom': 0},
                       loc('BA9Q.py'): {'attrib-starts': [],
        'code-line': "        print (PartialSuffixArray('PANAMABANANAS$',5))\r\n",
        'first-line': 32,
        'folded-linenos': [],
        'sel-line': 33,
        'sel-line-start': 1434,
        'selection_end': 1487,
        'selection_start': 1449,
        'zoom': 0},
                       loc('BA9R.py'): {'attrib-starts': [],
        'code-line': "        r,p,LCP = SuffixArray('panamabananas$',auxiliary=True,padLCP=True)\r\n",
        'first-line': 226,
        'folded-linenos': [],
        'sel-line': 238,
        'sel-line-start': 9358,
        'selection_end': 9426,
        'selection_start': 9420,
        'zoom': 0},
                       loc('BINS.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('CORR.py'): {'attrib-starts': [],
        'code-line': "'''\r\n",
        'first-line': 39,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('DBRU.py'): {'attrib-starts': [],
        'code-line': 'from rosalind import dbru,read_strings\r\n',
        'first-line': 10,
        'folded-linenos': [],
        'sel-line': 20,
        'sel-line-start': 750,
        'selection_end': 775,
        'selection_start': 771,
        'zoom': 0},
                       loc('DDEG.py'): {'attrib-starts': [],
        'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('DEG.py'): {'attrib-starts': [],
                                       'code-line': '#!/usr/bin/env python\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 0,
                                       'sel-line-start': 0,
                                       'selection_end': 21,
                                       'selection_start': 0,
                                       'zoom': 0},
                       loc('FRMT.py'): {'attrib-starts': [],
        'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('GASM.py'): {'attrib-starts': [],
        'code-line': '#!/usr/bin/env python\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 21,
        'selection_start': 21,
        'zoom': 0},
                       loc('GBK.py'): {'attrib-starts': [],
                                       'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('GLOB.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 6,
        'folded-linenos': [],
        'sel-line': 18,
        'sel-line-start': 803,
        'selection_end': 803,
        'selection_start': 803,
        'zoom': 0},
                       loc('GREP.py'): {'attrib-starts': [],
        'code-line': 'from rosalind import dbru,read_strings\r\n',
        'first-line': 12,
        'folded-linenos': [],
        'sel-line': 21,
        'sel-line-start': 727,
        'selection_end': 752,
        'selection_start': 748,
        'zoom': 0},
                       loc('INS.py'): {'attrib-starts': [],
                                       'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('INV.py'): {'attrib-starts': [],
                                       'code-line': '# Copyright (C) 2017-2019 Greenweaves Software Limited\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('KMP.py'): {'attrib-starts': [],
                                       'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('LONG.py'): {'attrib-starts': [],
        'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('MED.py'): {'attrib-starts': [],
                                       'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('MER.py'): {'attrib-starts': [],
                                       'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('MPRT.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2020 Simon Crase\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('MS.py'): {'attrib-starts': [],
                                      'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
                                      'first-line': 0,
                                      'folded-linenos': [],
                                      'sel-line': 1,
                                      'sel-line-start': 23,
                                      'selection_end': 23,
                                      'selection_start': 23,
                                      'zoom': 0},
                       loc('PAR.py'): {'attrib-starts': [],
                                       'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('PAR3.py'): {'attrib-starts': [],
        'code-line': '#!/usr/bin/env python# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('PCOV.py'): {'attrib-starts': [],
        'code-line': "'''\r\n",
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('PTRA.py'): {'attrib-starts': [],
        'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('QS.py'): {'attrib-starts': [],
                                      'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
                                      'first-line': 0,
                                      'folded-linenos': [],
                                      'sel-line': 1,
                                      'sel-line-start': 23,
                                      'selection_end': 23,
                                      'selection_start': 23,
                                      'zoom': 0},
                       loc('README.md'): {'attrib-starts': [],
        'code-line': '|osym|osym.py align.py|[Isolating Symbols in Alignments](http://rosalind.info/problems/osym/) [WIP](https://github.com/weka511/bioinformatics/issues/97)|\r\n',
        'first-line': 88,
        'folded-linenos': [],
        'sel-line': 121,
        'sel-line-start': 11067,
        'selection_end': 11089,
        'selection_start': 11089,
        'zoom': 0},
                       loc('alignment.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 5,
        'sel-line-start': 110,
        'selection_end': 157,
        'selection_start': 126,
        'zoom': 0},
                       loc('alph.py'): {'attrib-starts': [],
        'code-line': '            print (d)\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 61,
        'sel-line-start': 2344,
        'selection_end': 2365,
        'selection_start': 2356,
        'zoom': 0},
                       loc('assemble.py'): {'attrib-starts': [],
        'code-line': '                        tail = lambda kmer: kmer[1:]):\r\n',
        'first-line': 621,
        'folded-linenos': [],
        'sel-line': 119,
        'sel-line-start': 3802,
        'selection_end': 3833,
        'selection_start': 3833,
        'zoom': 0},
                       loc('bf.py'): {'attrib-starts': [],
                                      'code-line': 'from helpers import read_strings,create_list\r\n',
                                      'first-line': 49,
                                      'folded-linenos': [],
                                      'sel-line': 29,
                                      'sel-line-start': 1108,
                                      'selection_end': 1152,
                                      'selection_start': 1141,
                                      'zoom': 0},
                       loc('bfs.py'): {'attrib-starts': [],
                                       'code-line': '#    Copyright (C) 2017-2020 Greenweaves Software Limited\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('bip.py'): {'attrib-starts': [],
                                       'code-line': '        print (format_list([bip(g) for g in parse_graphs(f)]))\r\n',
                                       'first-line': 8,
                                       'folded-linenos': [],
                                       'sel-line': 25,
                                       'sel-line-start': 950,
                                       'selection_end': 1005,
                                       'selection_start': 994,
                                       'zoom': 0},
                       loc('bryant.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('cat.py'): {'attrib-starts': [],
                                       'code-line': '#    Copyright (C) 2019-2020 Greenweaves Software Limited\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('cc.py'): {'attrib-starts': [],
                                      'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
                                      'first-line': 12,
                                      'folded-linenos': [],
                                      'sel-line': 1,
                                      'sel-line-start': 23,
                                      'selection_end': 23,
                                      'selection_start': 23,
                                      'zoom': 0},
                       loc('chbp.py'): {'attrib-starts': [],
        'code-line': "               [expand('011101'),\r\n",
        'first-line': 24,
        'folded-linenos': [],
        'sel-line': 34,
        'sel-line-start': 1493,
        'selection_end': 1595,
        'selection_start': 1508,
        'zoom': 0},
                       loc('cntq.py'): {'attrib-starts': [],
        'code-line': '        print (cntq(6,\r\n',
        'first-line': 42,
        'folded-linenos': [],
        'sel-line': 56,
        'sel-line-start': 2175,
        'selection_end': 2273,
        'selection_start': 2190,
        'zoom': 0},
                       loc('combinatorics.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('conv.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('count-kmer-occurrences.py'): {'attrib-starts': [('reverse_complement',
        48)],
        'first-line': 126,
        'folded-linenos': [],
        'sel-line': 49,
        'sel-line-start': 1402,
        'selection_end': 1406,
        'selection_start': 1406,
        'zoom': 0},
                       loc('count-kmers.py'): {'attrib-starts': [],
        'first-line': 126,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 372,
        'selection_end': 436,
        'selection_start': 436,
        'zoom': 0},
                       loc('count_kmers.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 130,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('cset.py'): {'attrib-starts': [],
        'code-line': '    elapsed = time() - start\r\n',
        'first-line': 29,
        'folded-linenos': [],
        'sel-line': 47,
        'sel-line-start': 1958,
        'selection_end': 1972,
        'selection_start': 1972,
        'zoom': 0},
                       loc('cstr.py'): {'attrib-starts': [],
        'code-line': '        for row in cstr([\r\n',
        'first-line': 31,
        'folded-linenos': [],
        'sel-line': 32,
        'sel-line-start': 1343,
        'selection_end': 1508,
        'selection_start': 1362,
        'zoom': 0},
                       loc('cstr1.py'): {'attrib-starts': [],
        'first-line': 8,
        'folded-linenos': [],
        'sel-line': 26,
        'sel-line-start': 939,
        'selection_end': 947,
        'selection_start': 947,
        'zoom': 0},
                       loc('ctbl.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('ctbl.txt'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 37,
        'selection_end': 37,
        'selection_start': 37,
        'zoom': 0},
                       loc('cte.py'): {'attrib-starts': [],
                                       'code-line': '\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 17,
                                       'sel-line-start': 800,
                                       'selection_end': 800,
                                       'selection_start': 800,
                                       'zoom': 0},
                       loc('dag.py'): {'attrib-starts': [],
                                       'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('dij.py'): {'attrib-starts': [],
                                       'code-line': "            f.writelines(f'{Solution}\\n')\r\n",
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 50,
                                       'sel-line-start': 1995,
                                       'selection_end': 2036,
                                       'selection_start': 2036,
                                       'zoom': 0},
                       loc('dna.py'): {'attrib-starts': [],
                                       'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('edit.py'): {'attrib-starts': [],
        'code-line': '        d,_=edit(strings[0],strings[1])\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 25,
        'sel-line-start': 1021,
        'selection_end': 1037,
        'selection_start': 1033,
        'zoom': 0},
                       loc('edta.py'): {'attrib-starts': [],
        'code-line': '        d,s,t=edta(strings[0],strings[1])\r\n',
        'first-line': 36,
        'folded-linenos': [],
        'sel-line': 44,
        'sel-line-start': 1684,
        'selection_end': 1702,
        'selection_start': 1698,
        'zoom': 0},
                       loc('fibo.py'): {'attrib-starts': [],
        'code-line': '        for i in generate_fibonacci():\r\n',
        'first-line': 28,
        'folded-linenos': [],
        'sel-line': 45,
        'sel-line-start': 1510,
        'selection_end': 1546,
        'selection_start': 1546,
        'zoom': 0},
                       loc('file:d:/root/projects/Genera Biosystems/Development/source/scripts/extract-fcs-file-details.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('file:d:/root/projects/Genera Biosystems/Development/source/scripts/extract-fcs-params.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('foo.py'): {'attrib-starts': [('SoftDecoding|0|',
        58),
        ('SoftDecoding|0|.readFromFile|0|',
         64)],
                                       'code-line': "        f = open('input.txt', 'r')\r\n",
                                       'first-line': 55,
                                       'folded-linenos': [],
                                       'sel-line': 65,
                                       'sel-line-start': 1919,
                                       'selection_end': 1919,
                                       'selection_start': 1919,
                                       'zoom': 0},
                       loc('fragile.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 6,
        'folded-linenos': [],
        'sel-line': 19,
        'sel-line-start': 876,
        'selection_end': 876,
        'selection_start': 876,
        'zoom': 0},
                       loc('full.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('gaff.py'): {'attrib-starts': [],
        'code-line': '#\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('gcon.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019-2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('graphs.py'): {'attrib-starts': [],
        'code-line': '# CTE Shortest Cycle Through a Given Edge\r\n',
        'first-line': 182,
        'folded-linenos': [],
        'sel-line': 189,
        'sel-line-start': 6825,
        'selection_end': 6866,
        'selection_start': 6827,
        'zoom': 0},
                       loc('gs.py'): {'attrib-starts': [],
                                      'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
                                      'first-line': 0,
                                      'folded-linenos': [],
                                      'sel-line': 1,
                                      'sel-line-start': 23,
                                      'selection_end': 23,
                                      'selection_start': 23,
                                      'zoom': 0},
                       loc('hdag.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('hea.py'): {'attrib-starts': [],
                                       'code-line': '#\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 22,
                                       'selection_end': 22,
                                       'selection_start': 22,
                                       'zoom': 0},
                       loc('helpers-old.py'): {'attrib-starts': [],
        'first-line': 19,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('helpers.py'): {'attrib-starts': [('create_strings|0|',
        143)],
        'code-line': "    with open(get_file_name(),'r') as f:\r\n",
        'first-line': 147,
        'folded-linenos': [],
        'sel-line': 166,
        'sel-line-start': 5000,
        'selection_end': 5000,
        'selection_start': 5000,
        'zoom': 0},
                       loc('hiddenmarkov.py'): {'attrib-starts': [('ProbabilityOutcomeGivenHiddenPath',
        27)],
        'first-line': 13,
        'folded-linenos': [],
        'sel-line': 31,
        'sel-line-start': 1206,
        'selection_end': 1224,
        'selection_start': 1224,
        'zoom': 0},
                       loc('hmm.py'): {'attrib-starts': [('Test_10_HMM|0|',
        631),
        ('Test_10_HMM|0|.test_ba10e2|0|',
         713)],
                                       'code-line': '            Transition, Emission,StateNames = ConstructProfileHMM(0.289,\r\n',
                                       'first-line': 702,
                                       'folded-linenos': [],
                                       'sel-line': 714,
                                       'sel-line-start': 26500,
                                       'selection_end': 26542,
                                       'selection_start': 26538,
                                       'zoom': 0},
                       loc('in.txt'): {'attrib-starts': [],
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 858,
                                       'selection_end': 949,
                                       'selection_start': 949,
                                       'zoom': 0},
                       loc('itwv.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020-2021 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('ksim.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 85,
        'folded-linenos': [],
        'sel-line': 60,
        'sel-line-start': 869,
        'selection_end': 869,
        'selection_start': 869,
        'zoom': 0},
                       loc('laff-pypl.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020-2021 Greenweaves Software Limited\r\n',
        'first-line': 166,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 7642,
        'selection_start': 0,
        'zoom': 0},
                       loc('laff.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020-2021 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('lalign.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('lcsq.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('ling.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019-2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('loca.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('lrep.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('maj.py'): {'attrib-starts': [],
                                       'code-line': '#\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('mend.py'): {'attrib-starts': [],
        'code-line': '        newick_parser = newick.Parser(newick.Tokenizer())\r\n',
        'first-line': 14,
        'folded-linenos': [],
        'sel-line': 32,
        'sel-line-start': 1252,
        'selection_end': 1422,
        'selection_start': 1252,
        'zoom': 0},
                       loc('mgap.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('mmch.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('motz.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('mrep.py'): {'attrib-starts': [],
        'code-line': 'from argparse import ArgumentParser\r\n',
        'first-line': 2,
        'folded-linenos': [],
        'sel-line': 18,
        'sel-line-start': 786,
        'selection_end': 874,
        'selection_start': 786,
        'zoom': 0},
                       loc('mult.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('newick.py'): {'attrib-starts': [],
        'code-line': 'def newick_to_adjacency_list(T,\r\n',
        'first-line': 162,
        'folded-linenos': [],
        'sel-line': 175,
        'sel-line-start': 5829,
        'selection_end': 5857,
        'selection_start': 5833,
        'zoom': 0},
                       loc('nwc.py'): {'attrib-starts': [],
                                       'code-line': '        print ([n for n,_,_ in [bf(edges) for edges in extract_graphs(data)]])\r\n',
                                       'first-line': 48,
                                       'folded-linenos': [],
                                       'sel-line': 69,
                                       'sel-line-start': 2436,
                                       'selection_end': 2463,
                                       'selection_start': 2458,
                                       'zoom': 0},
                       loc('nwck.py'): {'attrib-starts': [],
        'code-line': '# Copyright (C) 2017 Greenweaves Software Pty Ltd\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('oap.py'): {'attrib-starts': [],
                                       'code-line': '#    Copyright (C) 2019-2021 Greenweaves Software Limited\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('orfr.py'): {'attrib-starts': [],
        'code-line': 'from Bio.Seq import Seq\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('osym.py'): {'attrib-starts': [],
        'code-line': "        print (osym('ATAGATA','ACAGGTA'))\r\n",
        'first-line': 23,
        'folded-linenos': [],
        'sel-line': 34,
        'sel-line-start': 1328,
        'selection_end': 1368,
        'selection_start': 1343,
        'zoom': 0},
                       loc('pdpl.py'): {'attrib-starts': [],
        'code-line': '# Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('phylogeny.py'): {'attrib-starts': [('TestPhylogeny|0|',
        1389),
        ('TestPhylogeny|0|.test_ba7g|0|',
         1734)],
        'code-line': '            a,b,root,T1= AdaptSmallParsimonyToUnrootedTrees(4,T)\r\n',
        'first-line': 1732,
        'folded-linenos': [],
        'sel-line': 1749,
        'sel-line-start': 65592,
        'selection_end': 65612,
        'selection_start': 65608,
        'zoom': 0},
                       loc('pmch.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2017-2020  Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('prsm.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('ps.py'): {'attrib-starts': [],
                                      'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
                                      'first-line': 0,
                                      'folded-linenos': [],
                                      'sel-line': 1,
                                      'sel-line-start': 23,
                                      'selection_end': 23,
                                      'selection_start': 23,
                                      'zoom': 0},
                       loc('qrt.py'): {'attrib-starts': [],
                                       'code-line': '        Input  = read_strings(f\'data/rosalind_{basename(__file__).split(".")[0]}.txt\')\r\n',
                                       'first-line': 38,
                                       'folded-linenos': [],
                                       'sel-line': 43,
                                       'sel-line-start': 1695,
                                       'selection_end': 1742,
                                       'selection_start': 1742,
                                       'zoom': 0},
                       loc('qrtd.py'): {'attrib-starts': [],
        'code-line': "    parser.add_argument('--download', default=False, action='store_true', help='process dataset from downloads diectory')\r\n",
        'first-line': 27,
        'folded-linenos': [],
        'sel-line': 33,
        'sel-line-start': 1429,
        'selection_end': 1550,
        'selection_start': 1429,
        'zoom': 0},
                       loc('qrtd1.py'): {'attrib-starts': [],
        'code-line': 'from matplotlib.pyplot  import figure, show\r\n',
        'first-line': 18,
        'folded-linenos': [],
        'sel-line': 26,
        'sel-line-start': 972,
        'selection_end': 1015,
        'selection_start': 1015,
        'zoom': 0},
                       loc('rear.py'): {'attrib-starts': [],
        'code-line': "    with open (r'C:\\Users\\Simon\\Downloads\\rosalind_rear(3).txt') as f:\r\n",
        'first-line': 46,
        'folded-linenos': [],
        'sel-line': 48,
        'sel-line-start': 1438,
        'selection_end': 1493,
        'selection_start': 1489,
        'zoom': 0},
                       loc('reference_tables.py'): {'attrib-starts': [],
        'code-line': 'integer_masses={ # Masses of amino acids to nearest integer, from Chapter 2\r\n',
        'first-line': 69,
        'folded-linenos': [],
        'sel-line': 48,
        'sel-line-start': 2151,
        'selection_end': 2165,
        'selection_start': 2151,
        'zoom': 0},
                       loc('reformat.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 6,
        'sel-line-start': 240,
        'selection_end': 272,
        'selection_start': 272,
        'zoom': 0},
                       loc('replication.py'): {'attrib-starts': [('generate_dNeighborhood|0|',
        234)],
        'code-line': '        return list(set(start + neighbourhood))\r\n',
        'first-line': 349,
        'folded-linenos': [],
        'sel-line': 259,
        'sel-line-start': 8314,
        'selection_end': 8346,
        'selection_start': 8346,
        'zoom': 0},
                       loc('revp.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('rna.py'): {'attrib-starts': [],
                                       'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
                                       'first-line': 30,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('rnas.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('rosalind-old.py'): {'attrib-starts': [('TestRosalind',
        2523),
        ('TestRosalind.test_ba5n',
         3462)],
        'first-line': 3456,
        'folded-linenos': [],
        'sel-line': 3464,
        'sel-line-start': 136759,
        'selection_end': 136804,
        'selection_start': 136788,
        'zoom': 0},
                       loc('rosalind.py'): {'attrib-starts': [('distance_matrix|0|',
        1105),
        ('distance_matrix|0|.get_p_distance|0|',
         1119)],
        'code-line': "        '''\r\n",
        'first-line': 1163,
        'folded-linenos': [],
        'sel-line': 1123,
        'sel-line-start': 37199,
        'selection_end': 37210,
        'selection_start': 37210,
        'zoom': 0},
                       loc('rosalind_old.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 63,
        'sel-line-start': 1898,
        'selection_end': 1898,
        'selection_start': 1898,
        'zoom': 0},
                       loc('rsub.py'): {'attrib-starts': [],
        'code-line': "        for reverse in rsub('(((ostrich,cat)rat,mouse)dog,elephant)robot;',\r\n",
        'first-line': 33,
        'folded-linenos': [],
        'sel-line': 40,
        'sel-line-start': 1609,
        'selection_end': 2237,
        'selection_start': 1632,
        'zoom': 0},
                       loc('sc.py'): {'attrib-starts': [],
                                      'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
                                      'first-line': 0,
                                      'folded-linenos': [],
                                      'sel-line': 1,
                                      'sel-line-start': 23,
                                      'selection_end': 23,
                                      'selection_start': 23,
                                      'zoom': 0},
                       loc('scc.py'): {'attrib-starts': [],
                                       'code-line': '# Copyright (C) 2019-2020 Greenweaves Software Limited\r\n',
                                       'first-line': 0,
                                       'folded-linenos': [],
                                       'sel-line': 1,
                                       'sel-line-start': 23,
                                       'selection_end': 23,
                                       'selection_start': 23,
                                       'zoom': 0},
                       loc('scratch.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('scsp.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('sdag.py'): {'attrib-starts': [],
        'code-line': '# Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('sequence.py'): {'attrib-starts': [('gibbs|0|',
        257)],
        'code-line': '            bestMotifs = motifs\r\n',
        'first-line': 346,
        'folded-linenos': [],
        'sel-line': 351,
        'sel-line-start': 10853,
        'selection_end': 10878,
        'selection_start': 10878,
        'zoom': 0},
                       loc('sgra.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('sims.py'): {'attrib-starts': [],
        'code-line': 'from fasta import FastaContent\r\n',
        'first-line': 6,
        'folded-linenos': [],
        'sel-line': 23,
        'sel-line-start': 921,
        'selection_end': 951,
        'selection_start': 921,
        'zoom': 0},
                       loc('smgb.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('snarf.py'): {'attrib-starts': [('PeptideIdentification|0|',
        31),
        ('PeptideIdentification|0|.findPeptide|0|',
         76)],
        'code-line': '                    print (i,j,score)\r\n',
        'first-line': 69,
        'folded-linenos': [],
        'sel-line': 92,
        'sel-line-start': 12696,
        'selection_end': 12732,
        'selection_start': 12732,
        'zoom': 0},
                       loc('snarfed.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('snp.py'): {'attrib-starts': [],
                                       'code-line': 'def SuffixArray(s,auxiliary=False,padLCP=False):\r\n',
                                       'first-line': 313,
                                       'folded-linenos': [],
                                       'sel-line': 322,
                                       'sel-line-start': 10543,
                                       'selection_end': 10560,
                                       'selection_start': 10547,
                                       'zoom': 0},
                       loc('sort.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 17,
        'folded-linenos': [],
        'sel-line': 17,
        'sel-line-start': 781,
        'selection_end': 781,
        'selection_start': 781,
        'zoom': 0},
                       loc('spec.py'): {'attrib-starts': [],
        'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('spectrum.py'): {'attrib-starts': [],
        'code-line': "if __name__=='__main__':\r\n",
        'first-line': 3042,
        'folded-linenos': [],
        'sel-line': 1191,
        'sel-line-start': 45763,
        'selection_end': 46077,
        'selection_start': 45763,
        'zoom': 0},
                       loc('sptb.py'): {'attrib-starts': [],
        'code-line': '    elapsed = time.time()-start\r\n',
        'first-line': 28,
        'folded-linenos': [],
        'sel-line': 47,
        'sel-line-start': 1776,
        'selection_end': 1807,
        'selection_start': 1807,
        'zoom': 0},
                       loc('sptd.py'): {'attrib-starts': [],
        'code-line': "             '(rat,(dog,cat),(rabbit,(elephant,mouse)));',\r\n",
        'first-line': 29,
        'folded-linenos': [],
        'sel-line': 35,
        'sel-line-start': 1438,
        'selection_end': 1441,
        'selection_start': 1441,
        'zoom': 0},
                       loc('sq.py'): {'attrib-starts': [],
                                      'code-line': '#    Copyright (C) 2019 Greenweaves Software Limited\r\n',
                                      'first-line': 0,
                                      'folded-linenos': [],
                                      'sel-line': 1,
                                      'sel-line-start': 23,
                                      'selection_end': 23,
                                      'selection_start': 23,
                                      'zoom': 0},
                       loc('subo.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('suff.py'): {'attrib-starts': [],
        'code-line': '#   Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('template.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 35,
        'folded-linenos': [],
        'sel-line': 38,
        'sel-line-start': 1391,
        'selection_end': 1391,
        'selection_start': 1391,
        'zoom': 0},
                       loc('tree.py'): {'attrib-starts': [],
        'code-line': '# Copyright (C) 2020 Greenweaves Software Limited\r\n',
        'first-line': 38,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('trie.py'): {'attrib-starts': [],
        'code-line': 'def convert_trie(Trie):\r\n',
        'first-line': 12,
        'folded-linenos': [],
        'sel-line': 24,
        'sel-line-start': 879,
        'selection_end': 895,
        'selection_start': 883,
        'zoom': 0},
                       loc('ts.py'): {'attrib-starts': [],
                                      'code-line': 'from helpers import parse_graph, create_adjacency, format_list\r\n',
                                      'first-line': 7,
                                      'folded-linenos': [],
                                      'sel-line': 19,
                                      'sel-line-start': 814,
                                      'selection_end': 863,
                                      'selection_start': 847,
                                      'zoom': 0},
                       loc('tyrocidine.py'): {'attrib-starts': [],
        'code-line': 'from reference_tables import amino_acids\r\n',
        'first-line': 33,
        'folded-linenos': [],
        'sel-line': 19,
        'sel-line-start': 816,
        'selection_end': 816,
        'selection_start': 816,
        'zoom': 0},
                       loc('ukkonen.py'): {'attrib-starts': [],
        'code-line': '# -*- coding: utf-8 -*-\r\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 23,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [''])}
search.replace-history = ['Right',
                          'Rright',
                          'Down',
                          'Coins',
                          'np.argsort',
                          'get_cyclo_spectrum',
                          'get_cycle_spectrum_from_abbrevs',
                          'get_cycle_spectrum',
                          'get_cyclo_spectrum_from_string',
                          'candidate_peptide',
                          'Candidates',
                          'Peptide',
                          'SmallParsimony',
                          'create_dprime',
                          'create_delta',
                          ',',
                          'np.inf',
                          'number',
                          '_tuple',
                          'self']
search.search-history = ['gibbs',
                         'itwv2',
                         'ctea',
                         'exc',
                         'skip',
                         'test_glob',
                         'right',
                         'down',
                         'coins',
                         '@skip',
                         'root',
                         'fastac',
                         'get_score',
                         'collectEdges',
                         'sort_by_descending_length',
                         'setLabel',
                         'setLab',
                         'setL',
                         'set',
                         'padLCP']
